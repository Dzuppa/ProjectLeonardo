<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Metrolib</name>
    </assembly>
    <members>
        <member name="T:Metrolib.AbstractBootstrapper">
            <summary>
                Base class for any bootstrapper to get the application running.
            </summary>
            <remarks>
                Responsible for:
                - (Live) Auto updating (TODO)
            </remarks>
        </member>
        <member name="T:Metrolib.Constants">
            <summary>
            </summary>
        </member>
        <member name="F:Metrolib.Constants.ForegroundColor">
            <summary>
            </summary>
        </member>
        <member name="F:Metrolib.Constants.ForegroundColorAccent">
            <summary>
            </summary>
        </member>
        <member name="F:Metrolib.Constants.ForegroundColorHovered">
            <summary>
            </summary>
        </member>
        <member name="F:Metrolib.Constants.ForegroundColorPressed">
            <summary>
            </summary>
        </member>
        <member name="F:Metrolib.Constants.ForegroundColorDisabled">
            <summary>
            </summary>
        </member>
        <member name="F:Metrolib.Constants.ForegroundBrush">
            <summary>
            </summary>
        </member>
        <member name="F:Metrolib.Constants.ForegroundBrushAccent">
            <summary>
            </summary>
        </member>
        <member name="F:Metrolib.Constants.ForegroundBrushHovered">
            <summary>
            </summary>
        </member>
        <member name="F:Metrolib.Constants.ForegroundBrushPressed">
            <summary>
            </summary>
        </member>
        <member name="F:Metrolib.Constants.ForegroundBrushDisabled">
            <summary>
            </summary>
        </member>
        <member name="T:Metrolib.Controls.BulletinItemsControl">
            <summary>
                An items control that presents each item with a bulletin point next to it.
            </summary>
        </member>
        <member name="F:Metrolib.Controls.BulletinItemsControl.ItemsSourceProperty">
            <summary>
                Definition of the <see cref="P:Metrolib.Controls.BulletinItemsControl.ItemsSource" /> dependency property.
            </summary>
        </member>
        <member name="F:Metrolib.Controls.BulletinItemsControl.BulletinMarginProperty">
            <summary>
                Definition of the <see cref="P:Metrolib.Controls.BulletinItemsControl.BulletinMargin" /> dependency property.
            </summary>
        </member>
        <member name="F:Metrolib.Controls.BulletinItemsControl.ItemTemplateProperty">
            <summary>
                Definition of the <see cref="P:Metrolib.Controls.BulletinItemsControl.ItemTemplate" /> dependency property.
            </summary>
        </member>
        <member name="F:Metrolib.Controls.BulletinItemsControl.ItemTemplateSelectorProperty">
            <summary>
                Definition of the <see cref="P:Metrolib.Controls.BulletinItemsControl.ItemTemplateSelector" /> dependency property.
            </summary>
        </member>
        <member name="P:Metrolib.Controls.BulletinItemsControl.ItemTemplateSelector">
            <summary>
                The template selector that is used to decide which template shall be used for each item of <see cref="P:Metrolib.Controls.BulletinItemsControl.ItemsSource" />.
            </summary>
        </member>
        <member name="P:Metrolib.Controls.BulletinItemsControl.ItemTemplate">
            <summary>
                The template that is used to present each item of the <see cref="P:Metrolib.Controls.BulletinItemsControl.ItemsSource" />.
            </summary>
        </member>
        <member name="P:Metrolib.Controls.BulletinItemsControl.BulletinMargin">
            <summary>
                The margin of the bulletin that's left to the actual content.
            </summary>
        </member>
        <member name="P:Metrolib.Controls.BulletinItemsControl.ItemsSource">
            <summary>
                The list of items to be presented.
            </summary>
        </member>
        <member name="T:Metrolib.Controls.DeleteButton">
            <summary>
            
            </summary>
        </member>
        <member name="T:Metrolib.Controls.MaximizeButton">
            <summary>
                A button to maximize something, for example a window.
            </summary>
        </member>
        <member name="F:Metrolib.Controls.MaximizeButton.IsMaximizedProperty">
            <summary>
                Definition of the <see cref="P:Metrolib.Controls.MaximizeButton.IsMaximized" /> dependency property.
            </summary>
        </member>
        <member name="P:Metrolib.Controls.MaximizeButton.IsMaximized">
            <summary>
                Whether or not this button shall represent the maximized state.
                When set to true, the button will show the icon for restore, otherwise for maximize.
            </summary>
        </member>
        <member name="T:Metrolib.Controls.MinimizeButton">
            <summary>
                A button to minimize something, for example a window.
            </summary>
        </member>
        <member name="T:Metrolib.Controls.FolderOpenButton">
            <summary>
                A button that should spawn a folder open dialog or a new explorer folder.
            </summary>
        </member>
        <member name="T:Metrolib.Controls.RefreshButton">
            <summary>
                A button that can be used to refresh things.
            </summary>
            <remarks>
                Shows a circular progress indicator while being refreshed.
            </remarks>
        </member>
        <member name="F:Metrolib.Controls.RefreshButton.IsRefreshingProperty">
            <summary>
                Definition of the <see cref="P:Metrolib.Controls.RefreshButton.IsRefreshing" /> dependency property.
            </summary>
        </member>
        <member name="P:Metrolib.Controls.RefreshButton.IsRefreshing">
            <summary>
                When set to true, the button will show a <see cref="T:Metrolib.CircularProgressBar" /> with
                <see cref="P:System.Windows.Controls.ProgressBar.IsIndeterminate" />
                set to true.
            </summary>
        </member>
        <member name="T:Metrolib.Controls.UndoButton">
            <summary>
                A button to undo something, for example a textbox change.
            </summary>
        </member>
        <member name="T:Metrolib.Controls.Charts.AxisControl">
            <summary>
                Responsible for displaying the vertical or horizontal axis of a chart.
            </summary>
        </member>
        <member name="F:Metrolib.Controls.Charts.AxisControl.OrientationProperty">
            <summary>
                Definition of the <see cref="P:Metrolib.Controls.Charts.AxisControl.Orientation" /> dependency property.
            </summary>
        </member>
        <member name="F:Metrolib.Controls.Charts.AxisControl.RangeProperty">
            <summary>
                Definition of the <see cref="P:Metrolib.Controls.Charts.AxisControl.Range" /> dependency property.
            </summary>
        </member>
        <member name="P:Metrolib.Controls.Charts.AxisControl.Range">
            <summary>
                The range in values to be displayed on this axis.
            </summary>
        </member>
        <member name="P:Metrolib.Controls.Charts.AxisControl.Orientation">
            <summary>
                The orientation of this axis (vertical or horizontal).
            </summary>
        </member>
        <member name="T:Metrolib.Controls.Charts.Line.Canvas.AbstractLineChartCanvas">
            <summary>
                Responsible for drawing one or more <see cref="T:Metrolib.ILineSeries" />.
            </summary>
        </member>
        <member name="F:Metrolib.Controls.Charts.Line.Canvas.AbstractLineChartCanvas.MinimumUpdateDelta">
            <summary>
                The minimum time we try to run our updates in.
                We will however reduce this in integer increments in case our update method takes too long (so
                we do not cause a buildup of events).
            </summary>
        </member>
        <member name="F:Metrolib.Controls.Charts.Line.Canvas.AbstractLineChartCanvas.XAxisProperty">
            <summary>
                Definition of the <see cref="P:Metrolib.Controls.Charts.Line.Canvas.AbstractLineChartCanvas.XAxis" /> dependency property.
            </summary>
        </member>
        <member name="F:Metrolib.Controls.Charts.Line.Canvas.AbstractLineChartCanvas.YAxisProperty">
            <summary>
                Definition of the <see cref="P:Metrolib.Controls.Charts.Line.Canvas.AbstractLineChartCanvas.YAxis" /> dependency property.
            </summary>
        </member>
        <member name="F:Metrolib.Controls.Charts.Line.Canvas.AbstractLineChartCanvas.XRangeProperty">
            <summary>
                Definition of the <see cref="P:Metrolib.Controls.Charts.Line.Canvas.AbstractLineChartCanvas.XRange" /> dependency property.
            </summary>
        </member>
        <member name="F:Metrolib.Controls.Charts.Line.Canvas.AbstractLineChartCanvas.YRangeProperty">
            <summary>
                Definition of the <see cref="P:Metrolib.Controls.Charts.Line.Canvas.AbstractLineChartCanvas.YRange" /> dependency property.
            </summary>
        </member>
        <member name="M:Metrolib.Controls.Charts.Line.Canvas.AbstractLineChartCanvas.#ctor">
            <summary>
                Initializes this canvas.
            </summary>
        </member>
        <member name="P:Metrolib.Controls.Charts.Line.Canvas.AbstractLineChartCanvas.YAxis">
            <summary>
            </summary>
        </member>
        <member name="P:Metrolib.Controls.Charts.Line.Canvas.AbstractLineChartCanvas.XAxis">
            <summary>
            </summary>
        </member>
        <member name="P:Metrolib.Controls.Charts.Line.Canvas.AbstractLineChartCanvas.XRange">
            <summary>
                The computed range of x-values in all <see cref="P:Metrolib.Controls.Charts.Line.Canvas.AbstractLineChartCanvas.Series" />.
            </summary>
        </member>
        <member name="P:Metrolib.Controls.Charts.Line.Canvas.AbstractLineChartCanvas.YRange">
            <summary>
                The computed range of y-values in all <see cref="P:Metrolib.Controls.Charts.Line.Canvas.AbstractLineChartCanvas.Series" />.
            </summary>
        </member>
        <member name="P:Metrolib.Controls.Charts.Line.Canvas.AbstractLineChartCanvas.Series">
            <summary>
                The series to display.
            </summary>
        </member>
        <member name="P:Metrolib.Controls.Charts.Line.Canvas.AbstractLineChartCanvas.SeriesCanvasses">
            <summary>
                The list of canvasses, one per <see cref="P:Metrolib.Controls.Charts.Line.Canvas.AbstractLineChartCanvas.Series" />.
            </summary>
        </member>
        <member name="P:Metrolib.Controls.Charts.Line.Canvas.AbstractLineChartCanvas.IsDirty">
            <summary>
                Whether or not this canvas is dirty and must be updated and rendered.
            </summary>
        </member>
        <member name="M:Metrolib.Controls.Charts.Line.Canvas.AbstractLineChartCanvas.SetDirty">
            <summary>
                Marks this canvas as dirty so it actually does some work the next time <see cref="M:Metrolib.Controls.Charts.Line.Canvas.AbstractLineChartCanvas.Update" /> is called.
            </summary>
        </member>
        <member name="M:Metrolib.Controls.Charts.Line.Canvas.AbstractLineChartCanvas.Update">
            <summary>
                Is called to prepare the canvas for rendering.
            </summary>
        </member>
        <member name="M:Metrolib.Controls.Charts.Line.Canvas.AbstractLineChartCanvas.CalculateCombinedRanges">
            <summary>
                Is called to determine the range of all series.
            </summary>
        </member>
        <member name="M:Metrolib.Controls.Charts.Line.Canvas.AbstractLineChartCanvas.OnRender(System.Windows.Media.DrawingContext)">
            <summary>
                Is called to render the contents of this canvas.
            </summary>
            <param name="drawingContext"></param>
        </member>
        <member name="M:Metrolib.Controls.Charts.Line.Canvas.AbstractLineChartCanvas.CreateCanvas(Metrolib.ILineSeries)">
            <summary>
                Creates a canvas responsible for drawing the given series only.
            </summary>
            <param name="series"></param>
            <returns></returns>
        </member>
        <member name="T:Metrolib.Controls.Charts.Line.Canvas.AbstractLineSeriesCanvas">
            <summary>
                Responsible for drawing an individual <see cref="T:Metrolib.ILineSeries" />.
            </summary>
        </member>
        <member name="M:Metrolib.Controls.Charts.Line.Canvas.AbstractLineSeriesCanvas.#ctor(Metrolib.ILineSeries)">
            <summary>
                Initializes this canvas.
            </summary>
            <param name="lineSeries"></param>
        </member>
        <member name="P:Metrolib.Controls.Charts.Line.Canvas.AbstractLineSeriesCanvas.Values">
            <summary>
                The values this canvas should display.
            </summary>
        </member>
        <member name="P:Metrolib.Controls.Charts.Line.Canvas.AbstractLineSeriesCanvas.XRange">
            <summary>
                The final range of x-values represented by this canvas.
            </summary>
        </member>
        <member name="P:Metrolib.Controls.Charts.Line.Canvas.AbstractLineSeriesCanvas.YRange">
            <summary>
                The final range of y-values represented by this canvas.
            </summary>
        </member>
        <member name="P:Metrolib.Controls.Charts.Line.Canvas.AbstractLineSeriesCanvas.DisplayedXRange">
            <summary>
                The range of x-values that shall be displayed by this canvas.
            </summary>
        </member>
        <member name="P:Metrolib.Controls.Charts.Line.Canvas.AbstractLineSeriesCanvas.DisplayedYRange">
            <summary>
                The range of y-values that shall be displayed by this canvas.
            </summary>
        </member>
        <member name="P:Metrolib.Controls.Charts.Line.Canvas.AbstractLineSeriesCanvas.Width">
            <summary>
                The width in independent device units that this canvas may use.
            </summary>
        </member>
        <member name="P:Metrolib.Controls.Charts.Line.Canvas.AbstractLineSeriesCanvas.Height">
            <summary>
                The height in independent device units that this canvas may use.
            </summary>
        </member>
        <member name="P:Metrolib.Controls.Charts.Line.Canvas.AbstractLineSeriesCanvas.Series">
            <summary>
                The series this canvas is responsible for drawing.
            </summary>
        </member>
        <member name="M:Metrolib.Controls.Charts.Line.Canvas.AbstractLineSeriesCanvas.Dispose">
            <summary>
                Disposes of this canvas.
            </summary>
        </member>
        <member name="M:Metrolib.Controls.Charts.Line.Canvas.AbstractLineSeriesCanvas.MakeDirty">
            <summary>
                Marks this canvas as dirty so the next call to <see cref="M:Metrolib.Controls.Charts.Line.Canvas.AbstractLineSeriesCanvas.Update" />
                actually does something instead of early exiting.
            </summary>
        </member>
        <member name="M:Metrolib.Controls.Charts.Line.Canvas.AbstractLineSeriesCanvas.ProjectToView(System.Collections.Generic.IEnumerable{System.Windows.Point},System.Int32)">
            <summary>
                Projects the given values into view-space, taking into account the range
                this canvas should actually display, as well as the dimensions of this canvas.
            </summary>
            <param name="values"></param>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="M:Metrolib.Controls.Charts.Line.Canvas.AbstractLineSeriesCanvas.Update">
            <summary>
                Updates this collection, if necessary.
            </summary>
            <returns>true when something has changed so this series needs to be redrawn.</returns>
        </member>
        <member name="M:Metrolib.Controls.Charts.Line.Canvas.AbstractLineSeriesCanvas.OnRender(System.Windows.Media.DrawingContext)">
            <summary>
                This method is called to actually draw the <see cref="T:Metrolib.ILineSeries" /> represented by this canvas.
            </summary>
            <param name="drawingContext"></param>
        </member>
        <member name="T:Metrolib.Controls.Charts.Line.Canvas.Line.LineSeriesCanvas">
            <summary>
                Responsible for drawing an individual <see cref="T:Metrolib.ILineSeries" /> as a single line and/or area.
            </summary>
        </member>
        <member name="M:Metrolib.Controls.Charts.Line.Canvas.Line.LineSeriesCanvas.#ctor(Metrolib.ILineSeries)">
            <summary>
                Initializes this canvas.
            </summary>
            <param name="lineSeries"></param>
        </member>
        <member name="P:Metrolib.Controls.Charts.Line.Canvas.Line.LineSeriesCanvas.XRange">
            <summary>
                The final range of x-values represented by this canvas.
            </summary>
        </member>
        <member name="P:Metrolib.Controls.Charts.Line.Canvas.Line.LineSeriesCanvas.YRange">
            <summary>
                The final range of y-values represented by this canvas.
            </summary>
        </member>
        <member name="M:Metrolib.Controls.Charts.Line.Canvas.Line.LineSeriesCanvas.OnRender(System.Windows.Media.DrawingContext)">
            <summary>
                Is called to actually draw the series.
            </summary>
            <param name="drawingContext"></param>
        </member>
        <member name="T:Metrolib.Controls.Charts.Line.Canvas.Line.LineChartCanvas">
            <summary>
                Is responsible for actually drawing points as a line.
            </summary>
        </member>
        <member name="M:Metrolib.Controls.Charts.Line.Canvas.Line.LineChartCanvas.CreateCanvas(Metrolib.ILineSeries)">
            <summary>
                Creates a canvas responsible for drawing the given series only.
            </summary>
            <param name="series"></param>
            <returns></returns>
        </member>
        <member name="T:Metrolib.Controls.Charts.Line.Canvas.Stacked.StackedLineSeriesCanvas">
            <summary>
                Responsible for drawing a single <see cref="T:Metrolib.ILineSeries" /> as an area on top
                of the previous' series.
            </summary>
        </member>
        <member name="M:Metrolib.Controls.Charts.Line.Canvas.Stacked.StackedLineSeriesCanvas.#ctor(Metrolib.ILineSeries)">
            <summary>
                Initializes this canvas.
            </summary>
            <param name="lineSeries"></param>
        </member>
        <member name="P:Metrolib.Controls.Charts.Line.Canvas.Stacked.StackedLineSeriesCanvas.Previous">
            <summary>
                The previous canvas on top of which this one resides.
            </summary>
        </member>
        <member name="P:Metrolib.Controls.Charts.Line.Canvas.Stacked.StackedLineSeriesCanvas.StackedYRange">
            <summary>
                The stacked range of y values.
            </summary>
        </member>
        <member name="P:Metrolib.Controls.Charts.Line.Canvas.Stacked.StackedLineSeriesCanvas.StackedValues">
            <summary>
                The stacked values of this series (i.e. this series + previous.stackedvalues)
            </summary>
        </member>
        <member name="P:Metrolib.Controls.Charts.Line.Canvas.Stacked.StackedLineSeriesCanvas.XRange">
            <summary>
                The final range of x-values represented by this canvas.
            </summary>
        </member>
        <member name="P:Metrolib.Controls.Charts.Line.Canvas.Stacked.StackedLineSeriesCanvas.YRange">
            <summary>
                The final range of y-values represented by this canvas.
            </summary>
            <remarks>
                Differs from <see cref="P:Metrolib.ILineSeries.YRange" /> because this is the range
                of the stacked series (i.e. the sum of all previous series).
            </remarks>
        </member>
        <member name="M:Metrolib.Controls.Charts.Line.Canvas.Stacked.StackedLineSeriesCanvas.StackWithPrevious">
            <summary>
                Recalculates <see cref="P:Metrolib.Controls.Charts.Line.Canvas.Stacked.StackedLineSeriesCanvas.StackedValues" />.
            </summary>
        </member>
        <member name="M:Metrolib.Controls.Charts.Line.Canvas.Stacked.StackedLineSeriesCanvas.GetYValue(System.Collections.Generic.IEnumerable{System.Windows.Point},System.Double)">
            <summary>
                Gets the y-value at the given x-value.
                Performs linear interpolation, if necessary.
                TODO: This method might need to be enhanced by the interpolation method, if one can be specified (min/max/avg)
            </summary>
            <param name="values"></param>
            <param name="x"></param>
            <returns></returns>
        </member>
        <member name="M:Metrolib.Controls.Charts.Line.Canvas.Stacked.StackedLineSeriesCanvas.OnRender(System.Windows.Media.DrawingContext)">
            <summary>
                Is called to actually draw the series.
            </summary>
            <param name="drawingContext"></param>
        </member>
        <member name="T:Metrolib.Controls.Charts.Line.Canvas.Stacked.StackedLineChartCanvas">
            <summary>
            
            </summary>
        </member>
        <member name="M:Metrolib.Controls.Charts.Line.Canvas.Stacked.StackedLineChartCanvas.Update">
            <summary>
                Is called to prepare the canvas for rendering.
            </summary>
        </member>
        <member name="M:Metrolib.Controls.Charts.Line.Canvas.Stacked.StackedLineChartCanvas.CreateCanvas(Metrolib.ILineSeries)">
            <summary>
                Creates a canvas responsible for drawing the given series only.
            </summary>
            <param name="series"></param>
            <returns></returns>
        </member>
        <member name="T:Metrolib.Controls.Charts.Network.Algorithms.ForceDirectedLayoutAlgorithm">
            <summary>
                Algorithm that performs a physical simulation where nodes repulse each other and edges are springs.
            </summary>
            <remarks>
                http://profs.etsmtl.ca/mMcGuffin/research/2012-mcguffin-simpleNetVis/mcguffin-2012-simpleNetVis.pdf.
            </remarks>
        </member>
        <member name="M:Metrolib.Controls.Charts.Network.Algorithms.ForceDirectedLayoutAlgorithm.#ctor(Metrolib.ForceDirectedLayout)">
            <summary>
                Initializes this object.
            </summary>
            <param name="layout"></param>
        </member>
        <member name="M:Metrolib.Controls.Charts.Network.Algorithms.ForceDirectedLayoutAlgorithm.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="P:Metrolib.Controls.Charts.Network.Algorithms.ForceDirectedLayoutAlgorithm.Result">
            <summary>
                The current result of the algorithm.
            </summary>
        </member>
        <member name="M:Metrolib.Controls.Charts.Network.Algorithms.ForceDirectedLayoutAlgorithm.Update(System.TimeSpan)">
            <summary>
                Updates the algorithm.
            </summary>
            <remarks>
                Is *always* invoked from the UI thread.
                This method should not block for longer than a few milliseconds or otherwise the UI might become stuck.
            </remarks>
            <param name="elapsed"></param>
        </member>
        <member name="M:Metrolib.Controls.Charts.Network.Algorithms.ForceDirectedLayoutAlgorithm.AddNode(Metrolib.INode)">
            <summary>
                Adds the given node to the list of nodes of the graph.
            </summary>
            <param name="node"></param>
        </member>
        <member name="M:Metrolib.Controls.Charts.Network.Algorithms.ForceDirectedLayoutAlgorithm.RemoveNode(Metrolib.INode)">
            <summary>
                Removes the given node from the list of nodes of the graph.
            </summary>
            <param name="node"></param>
        </member>
        <member name="M:Metrolib.Controls.Charts.Network.Algorithms.ForceDirectedLayoutAlgorithm.ClearNodes">
            <summary>
                Removes all nodes from the graph.
            </summary>
        </member>
        <member name="M:Metrolib.Controls.Charts.Network.Algorithms.ForceDirectedLayoutAlgorithm.Freeze(Metrolib.INode)">
            <summary>
                Freezes the given so that its position doesn't change until the node is unfrozen (<see cref="M:Metrolib.Controls.Charts.Network.Algorithms.ForceDirectedLayoutAlgorithm.Unfreeze(Metrolib.INode)" />) again.
            </summary>
            <remarks>
                Is invoked by the view when the user starts dragging nodes around.
            </remarks>
            <param name="node"></param>
        </member>
        <member name="M:Metrolib.Controls.Charts.Network.Algorithms.ForceDirectedLayoutAlgorithm.Unfreeze(Metrolib.INode)">
            <summary>
                Unfreezes the given node so that its may change, if the algorithm deems it necessary, of-course.
            </summary>
            <param name="node"></param>
        </member>
        <member name="M:Metrolib.Controls.Charts.Network.Algorithms.ForceDirectedLayoutAlgorithm.AddEdge(Metrolib.IEdge)">
            <summary>
                Adds the given edge to the graph.
            </summary>
            <remarks>
                Edges may point to nodes that have not been added (yet).
            </remarks>
            <param name="edge"></param>
        </member>
        <member name="M:Metrolib.Controls.Charts.Network.Algorithms.ForceDirectedLayoutAlgorithm.RemoveEdge(Metrolib.IEdge)">
            <summary>
                Removes the given list of edges from the graph.
            </summary>
            <remarks>
                Edges may point to nodes that have not been added (yet).
            </remarks>
            <param name="edge"></param>
        </member>
        <member name="M:Metrolib.Controls.Charts.Network.Algorithms.ForceDirectedLayoutAlgorithm.ClearEdges">
            <summary>
                Removes all edges from the graph.
            </summary>
        </member>
        <member name="M:Metrolib.Controls.Charts.Network.Algorithms.ForceDirectedLayoutAlgorithm.SetPosition(Metrolib.INode,System.Windows.Point)">
            <summary>
            Overwrites the position assigned by this algorithm with the given one.
            </summary>
            <param name="node"></param>
            <param name="position"></param>
        </member>
        <member name="T:Metrolib.Controls.EditableTextBlock">
            <summary>
                A control which behaves like a text block, until it's set to be editable.
                When editable, the textblock is replaced by a textbox, which allows the user to
                change the text property.
            </summary>
        </member>
        <member name="F:Metrolib.Controls.EditableTextBlock.PART_MarkdownPresenter">
            <summary>
                Name of the <see cref="T:System.Windows.Controls.TextBlock" /> control.
            </summary>
        </member>
        <member name="F:Metrolib.Controls.EditableTextBlock.PART_TextBox">
            <summary>
                Text of the <see cref="T:System.Windows.Controls.TextBox" /> control.
            </summary>
        </member>
        <member name="F:Metrolib.Controls.EditableTextBlock.IsEditingProperty">
            <summary>
                Definition of the <see cref="P:Metrolib.Controls.EditableTextBlock.IsEditing" /> dependency property.
            </summary>
        </member>
        <member name="F:Metrolib.Controls.EditableTextBlock.TextProperty">
            <summary>
                Definition of the <see cref="P:Metrolib.Controls.EditableTextBlock.Text" /> dependency property.
            </summary>
        </member>
        <member name="F:Metrolib.Controls.EditableTextBlock.WatermarkProperty">
            <summary>
                Definition of the <see cref="P:Metrolib.Controls.EditableTextBlock.Watermark" /> dependency property.
            </summary>
        </member>
        <member name="F:Metrolib.Controls.EditableTextBlock.TextOrWatermarkProperty">
            <summary>
                Definition of the <see cref="P:Metrolib.Controls.EditableTextBlock.TextOrWatermark" /> dependency property.
            </summary>
        </member>
        <member name="P:Metrolib.Controls.EditableTextBlock.TextOrWatermark">
            <summary>
                The text to display or the watermark, if <see cref="P:Metrolib.Controls.EditableTextBlock.Text" /> is null.
            </summary>
        </member>
        <member name="P:Metrolib.Controls.EditableTextBlock.Watermark">
            <summary>
                The watermark displayed in the <see cref="T:System.Windows.Controls.TextBox" /> if no text has been entered.
                By default, no watermark is displayed.
            </summary>
        </member>
        <member name="P:Metrolib.Controls.EditableTextBlock.IsEditing">
            <summary>
                Whether or not the text of this control is being edited.
            </summary>
            <remarks>
                The user can enter this state by double clicking / tapping this control.
                The user can leave this state by removing focus from this control (for example by pressing escape/tab).
            </remarks>
            <remarks>
                Setting this value to false is interpreted as ending editing mode (and NOT canceling it).
                If it is desired to programmatically cancel editing, then <see cref="M:Metrolib.Controls.EditableTextBlock.CancelEditing" />
                shall be called.
            </remarks>
        </member>
        <member name="P:Metrolib.Controls.EditableTextBlock.Text">
            <summary>
                The text being displayed by this control.
                The user may change this text, however the newly entered value is only
                forwarded to this property when editing has finished, i.e. when:
                - The user pressed enter
                - The user focused another element
                If the user pressed escape, then editing will be cancelled and the <see cref="P:Metrolib.Controls.EditableTextBlock.Text" />
                value will remain unchanged.
            </summary>
        </member>
        <member name="M:Metrolib.Controls.EditableTextBlock.OnApplyTemplate">
            <inheritdoc />
        </member>
        <member name="M:Metrolib.Controls.EditableTextBlock.CancelEditing">
            <summary>
                Hides the <see cref="T:System.Windows.Controls.TextBox" />, undoes all changes (if any) that were performed
                since editing was enabled and displays the <see cref="T:System.Windows.Controls.TextBlock" /> again.
            </summary>
        </member>
        <member name="T:Metrolib.Controls.TextBlocks.MarkdownParser">
            <summary>
                Interprets a <see cref="T:System.String" /> as markdown (<see cref="!:https://stackoverflow.com/editing-help" />)
                and creates a <see cref="T:System.Windows.Documents.TextElement" /> that represents the document.
            </summary>
        </member>
        <member name="M:Metrolib.Controls.TextBlocks.MarkdownParser.#ctor">
            <summary>
            </summary>
        </member>
        <member name="M:Metrolib.Controls.TextBlocks.MarkdownParser.Parse(System.String)">
            <summary>
                Parses the given markdown document and creates a document tree consisting of
                <see cref="T:System.Windows.Documents.TextElement" />s.
            </summary>
            <param name="markdown"></param>
            <returns></returns>
        </member>
        <member name="M:Metrolib.Controls.TextBlocks.MarkdownParser.Match(System.Collections.Generic.IReadOnlyList{Metrolib.Controls.TextBlocks.MarkdownToken},System.Int32@,System.Nullable{Metrolib.Controls.TextBlocks.MarkdownParser.TokenPattern},System.Nullable{Metrolib.Controls.TextBlocks.MarkdownParser.TokenPattern})">
            <summary>
                Tries to find a match with the given pattern(s).
                If start is specified, then the match must occur at the very first token.
                If end is specified, then the match includes every token until the first token
                matching the end pattern.
            </summary>
            <param name="tokens"></param>
            <param name="matchTotalTokenCount"></param>
            <param name="start"></param>
            <param name="end"></param>
            <returns>The list of matching tokens, excluding start/end tokens</returns>
        </member>
        <member name="T:Metrolib.Controls.TextBlocks.MarkdownToken">
            <summary>
            </summary>
        </member>
        <member name="F:Metrolib.Controls.TextBlocks.MarkdownToken.None">
            <summary>
                A "none" (empty) token. Represents text
                which has been stripped from the original document.
            </summary>
        </member>
        <member name="M:Metrolib.Controls.TextBlocks.MarkdownToken.Equals(Metrolib.Controls.TextBlocks.MarkdownToken)">
            <inheritdoc />
        </member>
        <member name="M:Metrolib.Controls.TextBlocks.MarkdownToken.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Metrolib.Controls.TextBlocks.MarkdownToken.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:Metrolib.Controls.TextBlocks.MarkdownToken.ToString">
            <inheritdoc />
        </member>
        <member name="T:Metrolib.Controls.TextBlocks.MarkdownTokenizer">
            <summary>
                Responsible for splitting a markdown document into a list of tokens.
            </summary>
        </member>
        <member name="M:Metrolib.Controls.TextBlocks.MarkdownTokenizer.Tokenize(System.String)">
            <summary>
                Parses the given markdown document and produces a list of tokens representing
                the document.
            </summary>
            <param name="markdown"></param>
            <returns></returns>
        </member>
        <member name="M:Metrolib.Controls.TextBlocks.MarkdownTokenizer.Optimize(System.Collections.Generic.IReadOnlyList{Metrolib.Controls.TextBlocks.MarkdownToken})">
            <summary>
                Returns an list of tokens which is semantically identical to the given list,
                but contains fewer tokens, if possible.
            </summary>
            <remarks>
            None tokens will be removed and adjacent text tokens will be merged.
            </remarks>
            <param name="tokens"></param>
        </member>
        <member name="T:Metrolib.Controls.TextBlocks.MarkdownTokenType">
            <summary>
            
            </summary>
        </member>
        <member name="T:Metrolib.Controls.TextBlocks.HyperlinkRun">
            <summary>
                A run that is styled to look like a typical hyperlink.
                Text is blue, the mouse changes its cursor on mouse over and the text changes color when
                hovered/pressed.
            </summary>
            <remarks>
                Is used by the <see cref="T:Metrolib.Controls.OpenInNewHyperlink" /> control which is suitable for most cases.
                This run should be used when the hyperlink is required to be part of a larger text (just place
                is next to any other run).
            </remarks>
        </member>
        <member name="F:Metrolib.Controls.TextBlocks.HyperlinkRun.NavigateUriProperty">
            <summary>
                Definition of the <see cref="P:Metrolib.Controls.TextBlocks.HyperlinkRun.NavigateUri" /> dependency property.
            </summary>
        </member>
        <member name="F:Metrolib.Controls.TextBlocks.HyperlinkRun.ProcessNameProperty">
            <summary>
                Definition of the <see cref="P:Metrolib.Controls.TextBlocks.HyperlinkRun.ProcessName" /> dependency property.
            </summary>
        </member>
        <member name="F:Metrolib.Controls.TextBlocks.HyperlinkRun.ProcessStartArgumentsProperty">
            <summary>
                Definition of the <see cref="P:Metrolib.Controls.TextBlocks.HyperlinkRun.ProcessStartArguments" /> dependency property.
            </summary>
        </member>
        <member name="F:Metrolib.Controls.TextBlocks.HyperlinkRun.IsPressedProperty">
            <summary>
                Definition of the <see cref="P:Metrolib.Controls.TextBlocks.HyperlinkRun.IsPressed" /> dependency property.
            </summary>
        </member>
        <member name="M:Metrolib.Controls.TextBlocks.HyperlinkRun.#ctor">
            <summary>
            Initializes this run.
            </summary>
        </member>
        <member name="P:Metrolib.Controls.TextBlocks.HyperlinkRun.NavigateUri">
            <summary>
                The URI the browser should navigate to.
            </summary>
        </member>
        <member name="P:Metrolib.Controls.TextBlocks.HyperlinkRun.ProcessName">
            <summary>
                The process that shall be started via <see cref="M:System.Diagnostics.Process.Start" />.
            </summary>
        </member>
        <member name="P:Metrolib.Controls.TextBlocks.HyperlinkRun.ProcessStartArguments">
            <summary>
                The arguments that shall be passed to <see cref="M:System.Diagnostics.Process.Start" />.
            </summary>
        </member>
        <member name="P:Metrolib.Controls.TextBlocks.HyperlinkRun.IsPressed">
            <summary>
                Whether or not this control is currently being pressed by the left mouse button
                or a touch gesture.
            </summary>
        </member>
        <member name="T:Metrolib.Controls.MarkdownPresenter">
            <summary>
                This control is responsible for presenting markdown text.
                <see cref="!:https://stackoverflow.com/editing-help" /> for a description of markdown.
            </summary>
        </member>
        <member name="M:Metrolib.Controls.MarkdownPresenter.OnApplyTemplate">
            <inheritdoc />
        </member>
        <member name="T:Metrolib.Controls.ViewDashboardToggleButton">
            <summary>
                A button to represent an ordered layout.
            </summary>
        </member>
        <member name="T:Metrolib.Controls.ViewQuiltToggleButton">
            <summary>
                A button to represent an unorderly layout.
            </summary>
        </member>
        <member name="T:Metrolib.Controls.ITreeViewItemViewModel">
            <summary>
            An optional view model that may be implemented by a view model that is being displayed
            in a <see cref="T:Metrolib.Controls.FlatTreeView"/>. The view model is notified about whether or not
            its hosting <see cref="T:Metrolib.Controls.FlatTreeViewItem"/> is selected and/or expanded.
            </summary>
        </member>
        <member name="P:Metrolib.Controls.ITreeViewItemViewModel.IsSelected">
            <summary>
            
            </summary>
        </member>
        <member name="P:Metrolib.Controls.ITreeViewItemViewModel.IsExpanded">
            <summary>
            
            </summary>
        </member>
        <member name="T:Metrolib.Controls.MenuItemContentControl">
            <summary>
            
            </summary>
        </member>
        <member name="T:Metrolib.Controls.FlatExpander">
            <summary>
                A "flat" expander:
                - no border
                - <see cref="T:Metrolib.Controls.ExpanderToggleButton" /> to expand content
            </summary>
        </member>
        <member name="F:Metrolib.Controls.FlatExpander.HeaderIconHeightProperty">
            <summary>
                Definition of the <see cref="P:Metrolib.Controls.FlatExpander.HeaderIconHeight" /> dependency property.
            </summary>
        </member>
        <member name="P:Metrolib.Controls.FlatExpander.HeaderIconHeight">
            <summary>
                The height of the header's icon.
            </summary>
        </member>
        <member name="T:Metrolib.Controls.FlatGroupBox">
            <summary>
            A group box in a flat style:
            - No border
            - Header has increased font size
            </summary>
        </member>
        <member name="T:Metrolib.Controls.PageOverlay">
            <summary>
                A control meant to inform the user about the application, for example:
                - Who wrote it
                - Which version is running
                - What dependencies does it use
                - etc...
            </summary>
        </member>
        <member name="F:Metrolib.Controls.PageOverlay.IsOpenProperty">
            <summary>
                Definition of the <see cref="P:Metrolib.Controls.PageOverlay.IsOpen" /> dependency property.
            </summary>
        </member>
        <member name="F:Metrolib.Controls.PageOverlay.ShowCommandProperty">
            <summary>
                Definition of the <see cref="P:Metrolib.Controls.PageOverlay.ShowCommand" /> dependency property.
            </summary>
        </member>
        <member name="F:Metrolib.Controls.PageOverlay.HorizontalOffsetProperty">
            <summary>
                Definition of the <see cref="P:Metrolib.Controls.PageOverlay.HorizontalOffset" /> dependency property.
            </summary>
        </member>
        <member name="F:Metrolib.Controls.PageOverlay.ContentMarginProperty">
            <summary>
                Definition of the <see cref="P:Metrolib.Controls.PageOverlay.ContentMargin" /> dependency property.
            </summary>
        </member>
        <member name="M:Metrolib.Controls.PageOverlay.#ctor">
            <summary>
                Initializes this object.
            </summary>
        </member>
        <member name="P:Metrolib.Controls.PageOverlay.ContentMargin">
            <summary>
                The margin used to animate the slide-in effect when the control is opened.
            </summary>
        </member>
        <member name="P:Metrolib.Controls.PageOverlay.HorizontalOffset">
            <summary>
                The horizontal offset used to animate the slide-in effect when the control is opened.
            </summary>
        </member>
        <member name="P:Metrolib.Controls.PageOverlay.IsOpen">
            <summary>
            </summary>
        </member>
        <member name="P:Metrolib.Controls.PageOverlay.ShowCommand">
            <summary>
                This command can be used to show this dialog.
            </summary>
        </member>
        <member name="T:Metrolib.Controls.AddButton">
            <summary>
                A button that can be used to add things (files, items to a list, etc...)
            </summary>
        </member>
        <member name="T:Metrolib.Controls.AlertControl">
            <summary>
                This control is used to inform the user about the occurence of an unhandled exception.
                Can be used to let the user decide what should happen next.
            </summary>
        </member>
        <member name="F:Metrolib.Controls.AlertControl.ExceptionProperty">
            <summary>
                Definition of the <see cref="P:Metrolib.Controls.AlertControl.Exception" /> dependency property.
            </summary>
        </member>
        <member name="F:Metrolib.Controls.AlertControl.ExceptionTypeProperty">
            <summary>
                Definition of the <see cref="P:Metrolib.Controls.AlertControl.ExceptionType" /> dependency property.
            </summary>
        </member>
        <member name="F:Metrolib.Controls.AlertControl.CloseCommandProperty">
            <summary>
                Definition of the <see cref="P:Metrolib.Controls.AlertControl.CloseCommand" /> dependency property.
            </summary>
        </member>
        <member name="P:Metrolib.Controls.AlertControl.CloseCommand">
            <summary>
                The command that is executed when the user requests that this dialog be closed.
            </summary>
        </member>
        <member name="P:Metrolib.Controls.AlertControl.ExceptionType">
            <summary>
                The type of the exception that was encountered.
            </summary>
        </member>
        <member name="P:Metrolib.Controls.AlertControl.Exception">
            <summary>
                The exception that was encountered.
            </summary>
        </member>
        <member name="T:Metrolib.Controls.NextButton">
            <summary>
                A button used to jump to the next something, for example
                the next occurence of a search term in a document.
            </summary>
            <remarks>
                Displays a downwards arrow.
            </remarks>
        </member>
        <member name="T:Metrolib.Controls.PreviousButton">
            <summary>
                A button used to jump to the previous something, for example
                the previous occurence of a search term in a document.
            </summary>
            <remarks>
                Displays an upwards arrow.
            </remarks>
        </member>
        <member name="T:Metrolib.Controls.SearchButton">
            <summary>
                A button to initiate a search.
            </summary>
            <remarks>
                Displays a magnifying glass.
            </remarks>
        </member>
        <member name="T:Metrolib.Controls.FlatContextMenu">
            <summary>
                A context menu that is styled in the typical flat look.
                By default, all content is hosted inside <see cref="T:Metrolib.Controls.FlatMenuItem" />s which behave just like regular
                <see cref="T:System.Windows.Controls.MenuItem" />s.
            </summary>
            <remarks>
                In addition, content can be hosted inside a <see cref="T:Metrolib.Controls.MenuItemContentControl" /> which
                does NOT behave like a <see cref="T:System.Windows.Controls.MenuItem" /> at all. It allows the placement of any custom
                content inside a ContextMenu besides <see cref="T:System.Windows.Controls.MenuItem" />s.
            </remarks>
        </member>
        <member name="F:Metrolib.Controls.FlatContextMenu.IsFirstItemHoveredProperty">
            <summary>
                Definition of the <see cref="P:Metrolib.Controls.FlatContextMenu.IsFirstItemHovered" /> property.
            </summary>
        </member>
        <member name="F:Metrolib.Controls.FlatContextMenu.AnchorAlignmentProperty">
            <summary>
                Definition of the <see cref="P:Metrolib.Controls.FlatContextMenu.AnchorAlignment" /> property.
            </summary>
        </member>
        <member name="M:Metrolib.Controls.FlatContextMenu.#ctor">
            <summary>
                Initializes this <see cref="T:Metrolib.Controls.FlatContextMenu" />.
            </summary>
        </member>
        <member name="P:Metrolib.Controls.FlatContextMenu.AnchorAlignment">
            <summary>
                The horizontal alignment of the anchor.
                Is set to <see cref="F:System.Windows.HorizontalAlignment.Left" /> by default.
            </summary>
        </member>
        <member name="P:Metrolib.Controls.FlatContextMenu.IsFirstItemHovered">
            <summary>
                Is set to true when the first item is hovered.
            </summary>
        </member>
        <member name="M:Metrolib.Controls.FlatContextMenu.GetContainerForItemOverride">
            <summary>
                Creates and returns a new Metrolib.Controls.FlatMenuItem container.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Metrolib.Controls.FlatContextMenu.IsItemItsOwnContainerOverride(System.Object)">
            <summary>
                Determines whether an object is a <see cref="T:Metrolib.Controls.FlatMenuItem" /> or
                a <see cref="T:Metrolib.Controls.MenuItemContentControl" />.
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="T:Metrolib.Controls.FlatMenuItem">
            <summary>
            </summary>
        </member>
        <member name="M:Metrolib.Controls.FlatMenuItem.OnApplyTemplate">
            <summary>
                Called when the template's tree is generated.
            </summary>
        </member>
        <member name="T:Metrolib.Controls.List.FlatListViewItem">
            <summary>
                A "flat" list view item.
            </summary>
        </member>
        <member name="T:Metrolib.Controls.FlatListView">
            <summary>
                A list-view in a "flat" look:
                - no borders
                - the scrollbar(s) are hidden unless the list view is hovered
                - scrollbars are translucent and are on top of the client content
            </summary>
        </member>
        <member name="M:Metrolib.Controls.FlatListView.GetContainerForItemOverride">
            <summary>
                Creates and returns a new Metrolib.Controls.FlatListViewItem container.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Metrolib.Controls.FlatListView.IsItemItsOwnContainerOverride(System.Object)">
            <summary>
                Determines whether an object is a Metrolib.Controls.FlatListViewItem.
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="T:Metrolib.Controls.OpenInNewHyperlink">
            <summary>
                A control to display a hyperlink to a user supplied URI.
                Opens the default browser when clicked.
            </summary>
        </member>
        <member name="F:Metrolib.Controls.OpenInNewHyperlink.NavigateUriProperty">
            <summary>
                Definition of the <see cref="P:Metrolib.Controls.OpenInNewHyperlink.NavigateUri" /> dependency property.
            </summary>
        </member>
        <member name="F:Metrolib.Controls.OpenInNewHyperlink.TextProperty">
            <summary>
                Definition of the <see cref="P:Metrolib.Controls.OpenInNewHyperlink.Text" /> dependency property.
            </summary>
        </member>
        <member name="F:Metrolib.Controls.OpenInNewHyperlink.ProcessNameProperty">
            <summary>
                Definition of the <see cref="P:Metrolib.Controls.OpenInNewHyperlink.ProcessName" /> dependency property.
            </summary>
        </member>
        <member name="F:Metrolib.Controls.OpenInNewHyperlink.ProcessStartArgumentsProperty">
            <summary>
                Definition of the <see cref="P:Metrolib.Controls.OpenInNewHyperlink.ProcessStartArguments" /> dependency property.
            </summary>
        </member>
        <member name="F:Metrolib.Controls.OpenInNewHyperlink.IsPressedProperty">
            <summary>
                Definition of the <see cref="P:Metrolib.Controls.OpenInNewHyperlink.IsPressed" /> dependency property.
            </summary>
        </member>
        <member name="P:Metrolib.Controls.OpenInNewHyperlink.ProcessName">
            <summary>
                The process that shall be started via <see cref="M:System.Diagnostics.Process.Start" />.
            </summary>
        </member>
        <member name="P:Metrolib.Controls.OpenInNewHyperlink.ProcessStartArguments">
            <summary>
                The arguments that shall be passed to <see cref="M:System.Diagnostics.Process.Start" />.
            </summary>
        </member>
        <member name="P:Metrolib.Controls.OpenInNewHyperlink.IsPressed">
            <summary>
                Whether or not this control is currently being pressed by the left mouse button.
            </summary>
        </member>
        <member name="P:Metrolib.Controls.OpenInNewHyperlink.Text">
            <summary>
                The text that shall be displayed instead of the <see cref="P:Metrolib.Controls.OpenInNewHyperlink.NavigateUri" />.
            </summary>
        </member>
        <member name="P:Metrolib.Controls.OpenInNewHyperlink.NavigateUri">
            <summary>
                The URI the browser should navigate to.
            </summary>
        </member>
        <member name="T:Metrolib.Controls.FlatScrollBar">
            <summary>
                A "flat" scrollbar that features a single bar only (no arrows, border, etc...)
            </summary>
        </member>
        <member name="F:Metrolib.Controls.FlatScrollBar.ThicknessProperty">
            <summary>
                Definition of the <see cref="P:Metrolib.Controls.FlatScrollBar.Thickness" /> dependency property.
            </summary>
        </member>
        <member name="P:Metrolib.Controls.FlatScrollBar.Thickness">
            <summary>
                The thickness of the scrollbar.
            </summary>
        </member>
        <member name="T:Metrolib.Controls.FlatScrollViewer">
            <summary>
                A scroll viewer offering a "flat" view:
                - The scrollbar is situated on top of the client content instead of besides it
            </summary>
        </member>
        <member name="F:Metrolib.Controls.FlatScrollViewer.ScrollBarThicknessProperty">
            <summary>
                Definition of the <see cref="P:Metrolib.Controls.FlatScrollViewer.ScrollBarThickness" /> dependency property.
            </summary>
        </member>
        <member name="F:Metrolib.Controls.FlatScrollViewer.MousePanningModeProperty">
            <summary>
                Definition of the <see cref="P:Metrolib.Controls.FlatScrollViewer.MousePanningMode" /> dependency property.
            </summary>
        </member>
        <member name="P:Metrolib.Controls.FlatScrollViewer.MousePanningMode">
            <summary>
                Similar to <see cref="T:System.Windows.Controls.PanningMode" />, but controls how the scrollviewer reacts to mouse events.
            </summary>
        </member>
        <member name="P:Metrolib.Controls.FlatScrollViewer.ScrollBarThickness">
            <summary>
                The thickness of the horizontal and vertical scrollbars.
            </summary>
        </member>
        <member name="M:Metrolib.Controls.FlatScrollViewer.OnMouseDown(System.Windows.Input.MouseButtonEventArgs)">
            <summary>
                Invoked when an unhandled System.Windows.Input.Mouse.MouseDown attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Metrolib.Controls.FlatScrollViewer.OnMouseMove(System.Windows.Input.MouseEventArgs)">
            <summary>
            Invoked when an unhandled System.Windows.Input.Mouse.MouseMove attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Metrolib.Controls.FlatScrollViewer.OnMouseUp(System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Invoked when an unhandled System.Windows.Input.Mouse.MouseUp routed event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.
            </summary>
            <param name="e"></param>
        </member>
        <member name="T:Metrolib.Controls.Tab.FlatTabControl">
            <summary>
                A "flat" tab control.
            </summary>
        </member>
        <member name="M:Metrolib.Controls.Tab.FlatTabControl.GetContainerForItemOverride">
            <summary>
                Creates and returns a new Metrolib.Controls.FlatTabItem container.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Metrolib.Controls.Tab.FlatTabControl.IsItemItsOwnContainerOverride(System.Object)">
            <summary>
                Determines whether an object is a Metrolib.Controls.FlatTabItem.
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="T:Metrolib.Controls.FlatTabItem">
            <summary>
                A "flat" tab item.
            </summary>
        </member>
        <member name="T:Metrolib.Controls.FlatTextBlock">
            <summary>
                A "flat" <see cref="T:System.Windows.Controls.TextBlock" /> that supports the <see cref="F:Metrolib.Controls.Properties.IsInvertedProperty" />.
            </summary>
        </member>
        <member name="F:Metrolib.Controls.FlatTextBlock.InvertedForegroundProperty">
            <summary>
                Definition of the <see cref="P:Metrolib.Controls.FlatTextBlock.InvertedForeground" /> dependency property.
            </summary>
        </member>
        <member name="P:Metrolib.Controls.FlatTextBlock.InvertedForeground">
            <summary>
                The foreground of this textblock when the <see cref="F:Metrolib.Controls.Properties.IsInvertedProperty" /> is set to true.
            </summary>
        </member>
        <member name="T:Metrolib.Controls.FlatPasswordBox">
            <summary>
            </summary>
        </member>
        <member name="F:Metrolib.Controls.FlatPasswordBox.WatermarkProperty">
            <summary>
                Definition of the <see cref="P:Metrolib.Controls.FlatPasswordBox.Watermark" /> property.
            </summary>
        </member>
        <member name="F:Metrolib.Controls.FlatPasswordBox.PasswordProperty">
            <summary>
                Definition of the <see cref="P:Metrolib.Controls.FlatPasswordBox.Password" /> property.
            </summary>
        </member>
        <member name="P:Metrolib.Controls.FlatPasswordBox.Watermark">
            <summary>
                The watermark that is displayed for as long as no password has been entered.
            </summary>
        </member>
        <member name="P:Metrolib.Controls.FlatPasswordBox.Password">
            <summary>
                The password that has been entered by the user.
            </summary>
        </member>
        <member name="E:Metrolib.Controls.FlatPasswordBox.PasswordChanged">
            <summary>
                Is fired whenever the <see cref="P:Metrolib.Controls.FlatPasswordBox.Password" /> changes.
            </summary>
        </member>
        <member name="M:Metrolib.Controls.FlatPasswordBox.OnApplyTemplate">
            <summary>
                Called when the template's tree is generated.
            </summary>
        </member>
        <member name="T:Metrolib.Controls.SearchTextBox">
            <summary>
                A text-box meant to input a search term.
                - offers a dedicated button to perform the search
                - offers a dedicated button to clear the search term
                - offers a display of the number of matches
                - offers buttons and shortcuts to advance to the next/previous location
            </summary>
        </member>
        <member name="F:Metrolib.Controls.SearchTextBox.WatermarkProperty">
            <summary>
                Definition of the <see cref="P:Metrolib.Controls.SearchTextBox.Watermark" /> dependency property.
            </summary>
        </member>
        <member name="F:Metrolib.Controls.SearchTextBox.IsPerformingSearchProperty">
            <summary>
                Definition of the <see cref="P:Metrolib.Controls.SearchTextBox.IsPerformingSearch" /> dependency property.
            </summary>
        </member>
        <member name="F:Metrolib.Controls.SearchTextBox.StartSearchCommandProperty">
            <summary>
                Definition of the <see cref="P:Metrolib.Controls.SearchTextBox.StartSearchCommand" /> dependency property.
            </summary>
        </member>
        <member name="F:Metrolib.Controls.SearchTextBox.StopSearchCommandProperty">
            <summary>
                Definition of the <see cref="P:Metrolib.Controls.SearchTextBox.StopSearchCommand" /> dependency property.
            </summary>
        </member>
        <member name="F:Metrolib.Controls.SearchTextBox.CurrentOccurenceIndexProperty">
            <summary>
                Definition of the <see cref="P:Metrolib.Controls.SearchTextBox.CurrentOccurenceIndex" /> dependency property.
            </summary>
        </member>
        <member name="F:Metrolib.Controls.SearchTextBox.OccurenceCountProperty">
            <summary>
                Definition of the <see cref="P:Metrolib.Controls.SearchTextBox.OccurenceCount" /> dependency property.
            </summary>
        </member>
        <member name="F:Metrolib.Controls.SearchTextBox.RequiresExplicitSearchStartProperty">
            <summary>
                Definition of the <see cref="P:Metrolib.Controls.SearchTextBox.RequiresExplicitSearchStart" /> dependency property.
            </summary>
        </member>
        <member name="M:Metrolib.Controls.SearchTextBox.#ctor">
            <summary>
                Initializes this SearchTextBox.
            </summary>
        </member>
        <member name="P:Metrolib.Controls.SearchTextBox.RequiresExplicitSearchStart">
            <summary>
                Whether or not the search must be started by the user explicitly by pressing enter or clicking the search button.
            </summary>
            <remarks>
                When set to true, then the <see cref="P:Metrolib.Controls.SearchTextBox.StartSearchCommand" /> is executed when the user initiates the search.
                When set to false then the <see cref="P:Metrolib.Controls.SearchTextBox.StartSearchCommand" /> and <see cref="P:Metrolib.Controls.SearchTextBox.StopSearchCommand" /> are never executed
                and instead the search should be started once <see cref="P:System.Windows.Controls.TextBox.Text" /> is set to a non-empty value.
                Is set to true by default.
            </remarks>
        </member>
        <member name="P:Metrolib.Controls.SearchTextBox.IsPerformingSearch">
            <summary>
                Is set to true if the search started, but not (yet) stopped.
            </summary>
        </member>
        <member name="P:Metrolib.Controls.SearchTextBox.OccurenceCount">
            <summary>
                The number of occurences of the search term in the data set.
                Must be supplied by the user of this class.
            </summary>
        </member>
        <member name="P:Metrolib.Controls.SearchTextBox.CurrentOccurenceIndex">
            <summary>
                The index of the currently focused occurence of the search term in the data set.
            </summary>
        </member>
        <member name="P:Metrolib.Controls.SearchTextBox.StartSearchCommand">
            <summary>
                The command that is executed when the user hits enter or presses the search button.
            </summary>
        </member>
        <member name="P:Metrolib.Controls.SearchTextBox.StopSearchCommand">
            <summary>
                The command that is executed when the user wants to stop/abort the search.
            </summary>
        </member>
        <member name="P:Metrolib.Controls.SearchTextBox.Watermark">
            <summary>
                The watermark that is displayed until <see cref="P:System.Windows.Controls.TextBox.Text" /> becomes non-empty.
            </summary>
        </member>
        <member name="M:Metrolib.Controls.SearchTextBox.OnApplyTemplate">
            <summary>
                Is called when a control template is applied.
            </summary>
        </member>
        <member name="M:Metrolib.Controls.SearchTextBox.OnKeyDown(System.Windows.Input.KeyEventArgs)">
            <summary>
                Invoked whenever an unhandled System.Windows.Input.Keyboard.KeyDown attached routed event reaches
                this SearchTextBox.
            </summary>
            <param name="e"></param>
        </member>
        <member name="T:Metrolib.Controls.EditorTextBox">
            <summary>
                A textbox meant to edit text.
                Displays a watermark while no text has been entered.
            </summary>
            <remarks>
                Supports many markdown shortcuts, when <see cref="P:Metrolib.Controls.EditorTextBox.EnableMarkdownShortcuts" /> is set to true.
            </remarks>
        </member>
        <member name="F:Metrolib.Controls.EditorTextBox.WatermarkProperty">
            <summary>
                Definition of the <see cref="P:Metrolib.Controls.EditorTextBox.Watermark" /> dependency property.
            </summary>
        </member>
        <member name="F:Metrolib.Controls.EditorTextBox.EnableMarkdownShortcutsProperty">
            <summary>
                Definition of the <see cref="P:Metrolib.Controls.EditorTextBox.EnableMarkdownShortcuts" /> dependency property.
            </summary>
        </member>
        <member name="M:Metrolib.Controls.EditorTextBox.#ctor">
            <summary>
                Initializes this text box.
            </summary>
        </member>
        <member name="P:Metrolib.Controls.EditorTextBox.EnableMarkdownShortcuts">
            <summary>
                Whether or not this control shall accept shortcuts (key gestures) which insert the appropriate markdown
                syntax (such as ctrl+b to make text bold, inserts **...**).
                Is disabled by default.
            </summary>
        </member>
        <member name="P:Metrolib.Controls.EditorTextBox.Watermark">
            <summary>
                The watermark text that shall appear until <see cref="P:System.Windows.Controls.TextBox.Text" /> is no longer empty.
            </summary>
        </member>
        <member name="T:Metrolib.Controls.EmailToggleButton">
            <summary>
                A toggle button with a letter icon.
                The icon displays an opened letter when toggled.
            </summary>
        </member>
        <member name="T:Metrolib.Controls.ToggleButtonBase">
            <summary>
                Base class for toggle buttons of this library.
            </summary>
            <remarks>
                When a <see cref="P:System.Windows.FrameworkElement.ContextMenu" /> is attached to this button, it is automatically opened for as long as
                the button is checked. Similarly, when the contextmenu is closed, the button is automatically unchecked.
            </remarks>
        </member>
        <member name="F:Metrolib.Controls.ToggleButtonBase.InvertedForegroundProperty">
            <summary>
                Definition of the <see cref="P:Metrolib.Controls.ToggleButtonBase.InvertedForeground" /> dependency property.
            </summary>
        </member>
        <member name="F:Metrolib.Controls.ToggleButtonBase.NormalForegroundProperty">
            <summary>
                Definition of the <see cref="P:Metrolib.Controls.ToggleButtonBase.NormalForeground" /> dependency property.
            </summary>
        </member>
        <member name="F:Metrolib.Controls.ToggleButtonBase.HoveredForegroundProperty">
            <summary>
                Definition of the <see cref="P:Metrolib.Controls.ToggleButtonBase.HoveredForeground" /> dependency property.
            </summary>
        </member>
        <member name="F:Metrolib.Controls.ToggleButtonBase.PressedForegroundProperty">
            <summary>
                Definition of the <see cref="P:Metrolib.Controls.ToggleButtonBase.PressedForeground" /> dependency property.
            </summary>
        </member>
        <member name="F:Metrolib.Controls.ToggleButtonBase.CheckedForegroundProperty">
            <summary>
                Definition of the <see cref="P:Metrolib.Controls.ToggleButtonBase.CheckedForeground" /> dependency property.
            </summary>
        </member>
        <member name="F:Metrolib.Controls.ToggleButtonBase.HoveredAndCheckedForegroundProperty">
            <summary>
                Definition of the <see cref="P:Metrolib.Controls.ToggleButtonBase.HoveredAndCheckedForeground" /> dependency property.
            </summary>
        </member>
        <member name="F:Metrolib.Controls.ToggleButtonBase.HoveredBackgroundProperty">
            <summary>
                Definition of the <see cref="P:Metrolib.Controls.ToggleButtonBase.HoveredBackground" /> dependency property.
            </summary>
        </member>
        <member name="F:Metrolib.Controls.ToggleButtonBase.PressedBackgroundProperty">
            <summary>
                Definition of the <see cref="P:Metrolib.Controls.ToggleButtonBase.PressedBackground" /> dependency property.
            </summary>
        </member>
        <member name="F:Metrolib.Controls.ToggleButtonBase.CheckedBackgroundProperty">
            <summary>
                Definition of the <see cref="P:Metrolib.Controls.ToggleButtonBase.CheckedBackground" /> dependency property.
            </summary>
        </member>
        <member name="M:Metrolib.Controls.ToggleButtonBase.#ctor">
            <summary>
                Initializes a <see cref="T:Metrolib.Controls.ToggleButtonBase" />.
            </summary>
        </member>
        <member name="P:Metrolib.Controls.ToggleButtonBase.PressedForeground">
            <summary>
                The foreground of this button when it's pressed.
            </summary>
        </member>
        <member name="P:Metrolib.Controls.ToggleButtonBase.HoveredAndCheckedForeground">
            <summary>
                The foreground of this button when it's both hovered and pressed.
            </summary>
        </member>
        <member name="P:Metrolib.Controls.ToggleButtonBase.CheckedForeground">
            <summary>
                The foreground of this button when it's checked.
            </summary>
        </member>
        <member name="P:Metrolib.Controls.ToggleButtonBase.HoveredForeground">
            <summary>
                The foreground of this button when it's hovered.
            </summary>
        </member>
        <member name="P:Metrolib.Controls.ToggleButtonBase.NormalForeground">
            <summary>
                The button of this foreground when it's not checked, hovered, pressed or disabled.
            </summary>
        </member>
        <member name="P:Metrolib.Controls.ToggleButtonBase.CheckedBackground">
            <summary>
                The background of this button when it's checked.
            </summary>
        </member>
        <member name="P:Metrolib.Controls.ToggleButtonBase.PressedBackground">
            <summary>
                The background of this button when it's pressed by the mouse or by touch.
            </summary>
        </member>
        <member name="P:Metrolib.Controls.ToggleButtonBase.HoveredBackground">
            <summary>
                The background of this button when it's hovered by the mouse.
            </summary>
        </member>
        <member name="P:Metrolib.Controls.ToggleButtonBase.InvertedForeground">
            <summary>
                The foreground color, used when <see cref="F:Metrolib.Controls.Properties.IsInvertedProperty" /> is set to true.
            </summary>
        </member>
        <member name="T:Metrolib.Controls.ExpanderToggleButton">
            <summary>
                A toggle button that is typically used to expand/contract an area of the UI.
            </summary>
        </member>
        <member name="F:Metrolib.Controls.ExpanderToggleButton.InvertedForegroundProperty">
            <summary>
                Definition of the <see cref="P:Metrolib.Controls.ExpanderToggleButton.InvertedForeground" /> dependency property.
            </summary>
        </member>
        <member name="F:Metrolib.Controls.ExpanderToggleButton.IconHeightProperty">
            <summary>
                Definition of the <see cref="P:Metrolib.Controls.ExpanderToggleButton.IconHeight" /> dependency property.
            </summary>
        </member>
        <member name="P:Metrolib.Controls.ExpanderToggleButton.IconHeight">
            <summary>
                The height of the icon.
            </summary>
        </member>
        <member name="P:Metrolib.Controls.ExpanderToggleButton.InvertedForeground">
            <summary>
                The foreground color, used when <see cref="F:Metrolib.Controls.Properties.IsInvertedProperty" /> is set to true.
            </summary>
        </member>
        <member name="T:Metrolib.Controls.ExportButton">
            <summary>
                A simple button that allows for the exporting of data.
            </summary>
        </member>
        <member name="T:Metrolib.Controls.FlatToggleButton">
            <summary>
                An extended toggle button that offers an IsInverted property to control how the content shall be displayed.
            </summary>
        </member>
        <member name="T:Metrolib.Controls.FlatButton">
            <summary>
                The base class for most buttons offered by this library.
            </summary>
        </member>
        <member name="F:Metrolib.Controls.FlatButton.InvertedForegroundProperty">
            <summary>
                Definition of the <see cref="P:Metrolib.Controls.FlatButton.InvertedForeground" /> property.
            </summary>
        </member>
        <member name="F:Metrolib.Controls.FlatButton.NormalForegroundProperty">
            <summary>
                Definition of the <see cref="P:Metrolib.Controls.FlatButton.NormalForeground" /> property.
            </summary>
        </member>
        <member name="F:Metrolib.Controls.FlatButton.HoveredForegroundProperty">
            <summary>
                Definition of the <see cref="P:Metrolib.Controls.FlatButton.HoveredForeground" /> property.
            </summary>
        </member>
        <member name="F:Metrolib.Controls.FlatButton.HoveredBackgroundProperty">
            <summary>
                Definition of the <see cref="P:Metrolib.Controls.FlatButton.HoveredBackground" /> property.
            </summary>
        </member>
        <member name="F:Metrolib.Controls.FlatButton.PressedBackgroundProperty">
            <summary>
                Definition of the <see cref="P:Metrolib.Controls.FlatButton.PressedBackground" /> property.
            </summary>
        </member>
        <member name="F:Metrolib.Controls.FlatButton.BorderRadiusProperty">
            <summary>
                Definition of the <see cref="P:Metrolib.Controls.FlatButton.BorderRadius" /> property.
            </summary>
        </member>
        <member name="F:Metrolib.Controls.FlatButton.PressedForegroundProperty">
            <summary>
                Definition of the <see cref="P:Metrolib.Controls.FlatButton.PressedForeground" /> property.
            </summary>
        </member>
        <member name="M:Metrolib.Controls.FlatButton.#ctor">
            <summary>
                Initializes this button.
            </summary>
        </member>
        <member name="P:Metrolib.Controls.FlatButton.NormalForeground">
            <summary>
                The foreground brush that is used when the control is not in any of the following states:
                -<see cref="P:System.Windows.UIElement.IsMouseOver" />
                -<see cref="P:System.Windows.Controls.Primitives.ButtonBase.IsPressed" />
                -<see cref="P:System.Windows.UIElement.IsEnabled" />
            </summary>
        </member>
        <member name="P:Metrolib.Controls.FlatButton.PressedForeground">
            <summary>
                The foreground of this button when pressed.
            </summary>
        </member>
        <member name="P:Metrolib.Controls.FlatButton.BorderRadius">
            <summary>
                The radius of the border/background.
            </summary>
        </member>
        <member name="P:Metrolib.Controls.FlatButton.PressedBackground">
            <summary>
                The background of this button when it's pressed by the mouse or a touch gesture.
            </summary>
        </member>
        <member name="P:Metrolib.Controls.FlatButton.HoveredForeground">
            <summary>
                The foreground of this button when it's hovered by the mouse.
            </summary>
        </member>
        <member name="P:Metrolib.Controls.FlatButton.HoveredBackground">
            <summary>
                The background of this button when it's hovered by the mouse.
            </summary>
        </member>
        <member name="P:Metrolib.Controls.FlatButton.InvertedForeground">
            <summary>
                The foreground color, used when <see cref="F:Metrolib.Controls.Properties.IsInvertedProperty" /> is set to true.
            </summary>
        </member>
        <member name="T:Metrolib.Controls.MoreButton">
            <summary>
                A button that allows the user to show more content than is regularly visible, for example through
                a context-menu.
            </summary>
        </member>
        <member name="T:Metrolib.Controls.Properties">
            <summary>
                Contains the attached dependency properties defined by this library.
            </summary>
        </member>
        <member name="F:Metrolib.Controls.Properties.ActualForegroundProperty">
            <summary>
                This dependency property can be used to tell a <see cref="T:System.Windows.FrameworkElement" /> or even an entire sub-tree of the visual tree
                to render the foreground using the specified brush.
            </summary>
            <remarks>
                Most controls offered by this library properly implement an inverted style.
            </remarks>
        </member>
        <member name="M:Metrolib.Controls.Properties.GetActualForeground(System.Windows.DependencyObject)">
            <summary>
                Retrieves the value of the <see cref="F:Metrolib.Controls.Properties.ActualForegroundProperty" />.
            </summary>
            <param name="d"></param>
            <returns></returns>
        </member>
        <member name="M:Metrolib.Controls.Properties.SetActualForeground(System.Windows.DependencyObject,System.Windows.Media.Brush)">
            <summary>
                Sets the value of the <see cref="F:Metrolib.Controls.Properties.ActualForegroundProperty" />.
            </summary>
            <param name="d"></param>
            <param name="value"></param>
        </member>
        <member name="F:Metrolib.Controls.Properties.IsInvertedProperty">
            <summary>
                This dependency property can be used to tell a <see cref="T:System.Windows.FrameworkElement" /> or even an entire sub-tree of the visual tree
                to render inverted.
            </summary>
            <remarks>
                Most controls offered by this library properly implement an inverted style.
            </remarks>
        </member>
        <member name="M:Metrolib.Controls.Properties.GetIsInverted(System.Windows.DependencyObject)">
            <summary>
                Retrieves the value of the <see cref="F:Metrolib.Controls.Properties.IsInvertedProperty" />.
            </summary>
            <param name="d"></param>
            <returns></returns>
        </member>
        <member name="M:Metrolib.Controls.Properties.SetIsInverted(System.Windows.DependencyObject,System.Boolean)">
            <summary>
                Sets the value of the <see cref="F:Metrolib.Controls.Properties.IsInvertedProperty" />.
            </summary>
            <param name="d"></param>
            <param name="value"></param>
        </member>
        <member name="T:Metrolib.Controls.VisibilityToggleButton">
            <summary>
                A toggle button that allows the user to control whether a filter is being used to include or exclude items.
            </summary>
        </member>
        <member name="T:Metrolib.Controls.FlavourTextBlock">
            <summary>
                A textblock that displays "flavour" text to tell a user what to do next.
                Can be used to indicate a drop area (when nothing has been dropped yet).
            </summary>
        </member>
        <member name="F:Metrolib.Controls.FlavourTextBlock.TextProperty">
            <summary>
                Definition of the <see cref="P:Metrolib.Controls.FlavourTextBlock.Text" /> dependency property.
            </summary>
        </member>
        <member name="F:Metrolib.Controls.FlavourTextBlock.BorderRadiusProperty">
            <summary>
                Definition of the <see cref="P:Metrolib.Controls.FlavourTextBlock.BorderRadius" /> dependency property.
            </summary>
        </member>
        <member name="P:Metrolib.Controls.FlavourTextBlock.BorderRadius">
            <summary>
                The radius of the border around the text.
            </summary>
        </member>
        <member name="P:Metrolib.Controls.FlavourTextBlock.Text">
            <summary>
                The text that shall be displayed.
            </summary>
        </member>
        <member name="T:Metrolib.Controls.FlatTreeView">
            <summary>
                A <see cref="T:System.Windows.Controls.TreeView" /> in the usual flat style:
                - Minimal borders
                - No parent-child indicator (children are merely indented)
            </summary>
        </member>
        <member name="F:Metrolib.Controls.FlatTreeView.IsExpandableProperty">
            <summary>
                Definition of the <see cref="P:Metrolib.Controls.FlatTreeView.IsExpandable" /> dependency property.
            </summary>
        </member>
        <member name="P:Metrolib.Controls.FlatTreeView.IsExpandable">
            <summary>
                Whether or not items in this tree can be expanded.
                If they can be, then a clickable arrow appears next to each item's content.
                If not, then this arrow is hidden.
            </summary>
        </member>
        <member name="M:Metrolib.Controls.FlatTreeView.GetContainerForItemOverride">
            <summary>
                Creates and returns a new Metrolib.Controls.FlatTreeViewItem container.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Metrolib.Controls.FlatTreeView.IsItemItsOwnContainerOverride(System.Object)">
            <summary>
                Determines whether an object is a Metrolib.Controls.FlatTreeViewItem.
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="T:Metrolib.Controls.FlatTreeViewItem">
            <summary>
            </summary>
        </member>
        <member name="F:Metrolib.Controls.FlatTreeViewItem.IsExpandableProperty">
            <summary>
                Definition of the <see cref="P:Metrolib.Controls.FlatTreeViewItem.IsExpandable" /> dependency property.
            </summary>
        </member>
        <member name="M:Metrolib.Controls.FlatTreeViewItem.OnHeaderChanged(System.Object,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Metrolib.Controls.FlatTreeViewItem.OnExpanded(System.Windows.RoutedEventArgs)">
            <inheritdoc />
        </member>
        <member name="M:Metrolib.Controls.FlatTreeViewItem.OnCollapsed(System.Windows.RoutedEventArgs)">
            <inheritdoc />
        </member>
        <member name="M:Metrolib.Controls.FlatTreeViewItem.OnSelected(System.Windows.RoutedEventArgs)">
            <inheritdoc />
        </member>
        <member name="M:Metrolib.Controls.FlatTreeViewItem.OnUnselected(System.Windows.RoutedEventArgs)">
            <inheritdoc />
        </member>
        <member name="P:Metrolib.Controls.FlatTreeViewItem.IsExpandable">
            <summary>
                Whether or not this item can be expanded.
                If it can be, then a clickable arrow appears next to the presented content.
                If not, then this arrow is hidden.
            </summary>
        </member>
        <member name="P:Metrolib.Controls.FlatTreeViewItem.Depth">
            <summary>
                The depth of this item.
                Items that are children of their <see cref="T:Metrolib.Controls.FlatTreeView" /> have a depth of 0.
            </summary>
        </member>
        <member name="M:Metrolib.Controls.FlatTreeViewItem.GetContainerForItemOverride">
            <summary>
                Creates and returns a new Metrolib.Controls.FlatTreeViewItem container.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Metrolib.Controls.FlatTreeViewItem.IsItemItsOwnContainerOverride(System.Object)">
            <summary>
                Determines whether an object is a Metrolib.Controls.FlatTreeViewItem.
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="T:Metrolib.Controls.ChromelessWindow">
            <summary>
                Base class for a window without borders.
                Styled to look like a window in Windows 10.
            </summary>
        </member>
        <member name="F:Metrolib.Controls.ChromelessWindow.HideTitleProperty">
            <summary>
                Definition of the <see cref="P:Metrolib.Controls.ChromelessWindow.HideTitle" /> dependency property.
            </summary>
        </member>
        <member name="F:Metrolib.Controls.ChromelessWindow.VerticalHeaderAlignmentProperty">
            <summary>
                Definition of the <see cref="P:Metrolib.Controls.ChromelessWindow.VerticalHeaderAlignment" /> dependency property.
            </summary>
        </member>
        <member name="F:Metrolib.Controls.ChromelessWindow.HorizontalHeaderAlignmentProperty">
            <summary>
                Definition of the <see cref="P:Metrolib.Controls.ChromelessWindow.HorizontalHeaderAlignment" /> dependency property.
            </summary>
        </member>
        <member name="F:Metrolib.Controls.ChromelessWindow.HeaderProperty">
            <summary>
                Definition of the <see cref="P:Metrolib.Controls.ChromelessWindow.Header" /> dependency property.
            </summary>
        </member>
        <member name="F:Metrolib.Controls.ChromelessWindow.HeaderTemplateProperty">
            <summary>
                Definition of the <see cref="P:Metrolib.Controls.ChromelessWindow.HeaderTemplate" /> dependency property.
            </summary>
        </member>
        <member name="F:Metrolib.Controls.ChromelessWindow.HeaderTemplateSelectorProperty">
            <summary>
                Definition of the <see cref="P:Metrolib.Controls.ChromelessWindow.HeaderTemplateSelector" /> dependency property.
            </summary>
        </member>
        <member name="F:Metrolib.Controls.ChromelessWindow.TitleBarHeightProperty">
            <summary>
                Definition of the <see cref="P:Metrolib.Controls.ChromelessWindow.TitleBarHeight" /> dependency property.
            </summary>
        </member>
        <member name="P:Metrolib.Controls.ChromelessWindow.HideTitle">
            <summary>
                Whether or not the title of this window is actually shown.
            </summary>
        </member>
        <member name="P:Metrolib.Controls.ChromelessWindow.TitleBarHeight">
            <summary>
                The height of the title bar of this window.
                Set to 32 by default.
            </summary>
        </member>
        <member name="P:Metrolib.Controls.ChromelessWindow.VerticalHeaderAlignment">
            <summary>
                The vertical alignment of the content inside the title bar.
            </summary>
        </member>
        <member name="P:Metrolib.Controls.ChromelessWindow.HorizontalHeaderAlignment">
            <summary>
                The horizontal alignment of the content inside the title bar.
            </summary>
        </member>
        <member name="P:Metrolib.Controls.ChromelessWindow.HeaderTemplateSelector">
            <summary>
                The template selector for the content inside the title bar.
            </summary>
        </member>
        <member name="P:Metrolib.Controls.ChromelessWindow.HeaderTemplate">
            <summary>
                The template for the content inside the title bar.
            </summary>
        </member>
        <member name="P:Metrolib.Controls.ChromelessWindow.Header">
            <summary>
                Additional content inside the title bar.
            </summary>
        </member>
        <member name="M:Metrolib.Controls.ChromelessWindow.OnApplyTemplate">
            <summary>
                Called when the template's tree is generated.
            </summary>
        </member>
        <member name="T:Metrolib.Controls.EditToggleButton">
            <summary>
            A toggle button that allows to toggle between editing and not-.
            </summary>
        </member>
        <member name="T:Metrolib.Controls.MouseWheelGesture">
            <summary>
                Allows the definition of gestures that depend on the user moving the mouse wheel
                in a given direction.
            </summary>
        </member>
        <member name="T:Metrolib.Controls.MouseWheelGesture.WheelDirection">
            <summary>
                The direction the mouse wheel was moved in.
            </summary>
        </member>
        <member name="F:Metrolib.Controls.MouseWheelGesture.WheelDirection.None">
            <summary>
                The default value for <see cref="P:Metrolib.Controls.MouseWheelGesture.Direction" />.
            </summary>
        </member>
        <member name="F:Metrolib.Controls.MouseWheelGesture.WheelDirection.Up">
            <summary>
                The "up" direction. This is usually the direction aimed away from the user (i.e. when
                the user scrolls a document upwards).
            </summary>
        </member>
        <member name="F:Metrolib.Controls.MouseWheelGesture.WheelDirection.Down">
            <summary>
                The "down" direction. This is usually the direction aimed towards the user (i.e. when
                the user scrolls a document downwards).
            </summary>
        </member>
        <member name="M:Metrolib.Controls.MouseWheelGesture.#ctor">
            <summary>
                Initializes this gesture.
            </summary>
        </member>
        <member name="M:Metrolib.Controls.MouseWheelGesture.#ctor(System.Windows.Input.ModifierKeys)">
            <summary>
                Initializes this gesture.
            </summary>
            <param name="modifiers"></param>
        </member>
        <member name="P:Metrolib.Controls.MouseWheelGesture.Direction">
            <summary>
                The direction the user has to move the mouse wheel in, in order
                for the gesture to match.
            </summary>
        </member>
        <member name="P:Metrolib.Controls.MouseWheelGesture.WheelDown">
            <summary>
                A gesture that matches when the user moves mouse wheel down.
            </summary>
        </member>
        <member name="P:Metrolib.Controls.MouseWheelGesture.WheelUp">
            <summary>
                A gesture that matches when the user moves mouse wheel up.
            </summary>
        </member>
        <member name="M:Metrolib.Controls.MouseWheelGesture.Matches(System.Object,System.Windows.Input.InputEventArgs)">
            <summary>
                Tests if the given input event matches this gesture.
            </summary>
            <param name="targetElement"></param>
            <param name="inputEventArgs"></param>
            <returns></returns>
        </member>
        <member name="T:Metrolib.Controls.NotificationBadge">
            <summary>
                TBD
            </summary>
        </member>
        <member name="T:Metrolib.Controls.OneWayToggle">
            <summary>
                A button that can only be toggled on, but not off by itself.
                Should be used in conjunction with at least one other <see cref="T:Metrolib.Controls.OneWayToggle" /> to allow
                the user to switch between two or more states (identical to a group of <see cref="T:System.Windows.Controls.RadioButton" />s).
            </summary>
        </member>
        <member name="F:Metrolib.Controls.OneWayToggle.HasLeftBorderProperty">
            <summary>
                Definition of the <see cref="P:Metrolib.Controls.OneWayToggle.HasLeftBorder" /> dependency property.
            </summary>
        </member>
        <member name="F:Metrolib.Controls.OneWayToggle.HasRightBorderProperty">
            <summary>
                Definition of the <see cref="P:Metrolib.Controls.OneWayToggle.HasRightBorder" /> dependency property.
            </summary>
        </member>
        <member name="F:Metrolib.Controls.OneWayToggle.IsPressedProperty">
            <summary>
                Definition of the <see cref="P:Metrolib.Controls.OneWayToggle.IsPressed" /> dependency property.
            </summary>
        </member>
        <member name="F:Metrolib.Controls.OneWayToggle.IsCheckedProperty">
            <summary>
                Definition of the <see cref="P:Metrolib.Controls.OneWayToggle.IsChecked" /> dependency property.
            </summary>
        </member>
        <member name="P:Metrolib.Controls.OneWayToggle.IsChecked">
            <summary>
                Whether or not this toggle button is checked.
            </summary>
        </member>
        <member name="P:Metrolib.Controls.OneWayToggle.IsPressed">
            <summary>
                Whether or not this toggle button is currently pressed (mouse/touch).
            </summary>
        </member>
        <member name="P:Metrolib.Controls.OneWayToggle.HasRightBorder">
            <summary>
                Whether or not this toggle button shall display a right-hand border.
            </summary>
        </member>
        <member name="P:Metrolib.Controls.OneWayToggle.HasLeftBorder">
            <summary>
                Whether or not this toggle button shall display a left-hand border.
            </summary>
        </member>
        <member name="M:Metrolib.Controls.OneWayToggle.OnMouseDown(System.Windows.Input.MouseButtonEventArgs)">
            <summary>
                Invoked when an unhandled System.Windows.Input.Mouse.MouseDown attached event reaches this toggle button.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Metrolib.Controls.OneWayToggle.OnMouseUp(System.Windows.Input.MouseButtonEventArgs)">
            <summary>
                Invoked when an unhandled System.Windows.Input.Mouse.MouseUp attached event reaches this toggle button.
            </summary>
            <param name="e"></param>
        </member>
        <member name="T:Metrolib.Controls.FilterTextBox">
            <summary>
                A textbox meant to input queries used for filtering.
            </summary>
        </member>
        <member name="F:Metrolib.Controls.FilterTextBox.FilterTextProperty">
            <summary>
                Definition of the <see cref="P:Metrolib.Controls.FilterTextBox.FilterText" /> dependency property.
            </summary>
        </member>
        <member name="F:Metrolib.Controls.FilterTextBox.WatermarkProperty">
            <summary>
                Definition of the <see cref="P:Metrolib.Controls.FilterTextBox.Watermark" /> dependency property.
            </summary>
        </member>
        <member name="F:Metrolib.Controls.FilterTextBox.IsValidProperty">
            <summary>
                Definition of the <see cref="P:Metrolib.Controls.FilterTextBox.IsValid" /> dependency property.
            </summary>
        </member>
        <member name="F:Metrolib.Controls.FilterTextBox.HasFilterTextProperty">
            <summary>
                Definition of the <see cref="P:Metrolib.Controls.FilterTextBox.HasFilterText" /> dependency property.
            </summary>
        </member>
        <member name="M:Metrolib.Controls.FilterTextBox.#ctor">
            <summary>
                Initializes this object.
            </summary>
        </member>
        <member name="P:Metrolib.Controls.FilterTextBox.RemoveFilterTextButton">
            <summary>
                The button that appears to remove entered text.
            </summary>
            <remarks>
                Is used for unit tests.
            </remarks>
        </member>
        <member name="P:Metrolib.Controls.FilterTextBox.HasFilterText">
            <summary>
                Whether or not any <see cref="P:Metrolib.Controls.FilterTextBox.FilterText" /> has been entered.
            </summary>
        </member>
        <member name="P:Metrolib.Controls.FilterTextBox.IsValid">
            <summary>
                Whether or not the entered <see cref="P:Metrolib.Controls.FilterTextBox.FilterText" /> is valid.
            </summary>
            <remarks>
                When it is not, then the background is colored red to let the user know.
                Can be used when the user has to enter text in a specific format, for example
                SQL or a regular expression.
            </remarks>
        </member>
        <member name="P:Metrolib.Controls.FilterTextBox.Watermark">
            <summary>
                The watermark text that shall be displayed when the user hasn't entered any <see cref="P:Metrolib.Controls.FilterTextBox.FilterText" /> (yet).
            </summary>
        </member>
        <member name="P:Metrolib.Controls.FilterTextBox.FilterText">
            <summary>
                The filter text input by the user.
            </summary>
        </member>
        <member name="M:Metrolib.Controls.FilterTextBox.OnKeyDown(System.Windows.Input.KeyEventArgs)">
            <summary>
                Invoked when an unhandled System.Windows.Input.Keyboard.KeyDown attached event reaches
                this FilterTextBox.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Metrolib.Controls.FilterTextBox.OnApplyTemplate">
            <summary>
                Called when the template's tree is generated.
            </summary>
        </member>
        <member name="T:Metrolib.Controls.RemoveButton">
            <summary>
                A button used to remove something, for example an item in a list.
            </summary>
        </member>
        <member name="T:Metrolib.DateTimeHistogram">
            <summary>
                A chart displaying the density of a certain value over time.
            </summary>
        </member>
        <member name="T:Metrolib.AxisDefinition">
            <summary>
                Describes the x- or y-axis of a <see cref="T:Metrolib.LineChart" />.
            </summary>
        </member>
        <member name="M:Metrolib.AxisDefinition.#ctor">
            <summary>
                Initializes this axis.
            </summary>
        </member>
        <member name="P:Metrolib.AxisDefinition.LinePen">
            <summary>
                The pen used to draw lines over the diagram.
            </summary>
            <remarks>
                Lines are only drawn when there is enough space (<see cref="P:Metrolib.AxisDefinition.Spacing" />) and when
                <see cref="P:Metrolib.AxisDefinition.ShowLines" /> is true.
            </remarks>
        </member>
        <member name="P:Metrolib.AxisDefinition.Spacing">
            <summary>
                The spacing between ticks / lines in device independent units.
            </summary>
        </member>
        <member name="P:Metrolib.AxisDefinition.Caption">
            <summary>
                The caption next to the axis.
                Will be presented by a <see cref="T:System.Windows.Controls.ContentPresenter" />.
            </summary>
            <remarks>
                The content of the y-axis is rotated by 90° counter clockwise.
            </remarks>
        </member>
        <member name="P:Metrolib.AxisDefinition.ShowTicks">
            <summary>
            </summary>
        </member>
        <member name="P:Metrolib.AxisDefinition.ShowLines">
            <summary>
            </summary>
        </member>
        <member name="E:Metrolib.AxisDefinition.PropertyChanged">
            <summary>
                Is fired whenever a property changes.
            </summary>
        </member>
        <member name="M:Metrolib.AxisDefinition.GetLines(Metrolib.Range,System.Double)">
            <summary>
            </summary>
            <param name="valueRange"></param>
            <param name="display"></param>
            <returns></returns>
        </member>
        <member name="T:Metrolib.IAxisDefinition">
            <summary>
                Describes the x- or y-axis of a chart.
            </summary>
        </member>
        <member name="P:Metrolib.IAxisDefinition.LinePen">
            <summary>
                The pen used to draw lines over the diagram.
            </summary>
            <remarks>
                Lines are only drawn when there is enough space (<see cref="P:Metrolib.IAxisDefinition.Spacing" />) and when
                <see cref="P:Metrolib.IAxisDefinition.ShowLines" /> is true.
            </remarks>
        </member>
        <member name="P:Metrolib.IAxisDefinition.Spacing">
            <summary>
                The spacing between ticks / lines in device independent units.
            </summary>
        </member>
        <member name="P:Metrolib.IAxisDefinition.Caption">
            <summary>
                The caption next to the axis.
                Will be presented by a <see cref="T:System.Windows.Controls.ContentPresenter" />.
            </summary>
            <remarks>
                The content of the y-axis is rotated by 90° counter clockwise.
            </remarks>
        </member>
        <member name="P:Metrolib.IAxisDefinition.ShowTicks">
            <summary>
            </summary>
        </member>
        <member name="P:Metrolib.IAxisDefinition.ShowLines">
            <summary>
            </summary>
        </member>
        <member name="T:Metrolib.ILineSeries">
            <summary>
            </summary>
        </member>
        <member name="P:Metrolib.ILineSeries.Count">
            <summary>
                The amount of points in <see cref="P:Metrolib.ILineSeries.Values" />.
            </summary>
        </member>
        <member name="P:Metrolib.ILineSeries.Outline">
            <summary>
                The pen to draw the outline of this series with, if any.
            </summary>
        </member>
        <member name="P:Metrolib.ILineSeries.Fill">
            <summary>
                The brush to fill the area under this series, if any.
            </summary>
        </member>
        <member name="P:Metrolib.ILineSeries.PointOutline">
            <summary>
                The pen to draw the outline of the shape, representing individual data points.
            </summary>
        </member>
        <member name="P:Metrolib.ILineSeries.PointFill">
            <summary>
                The brush to fill the shape, representing individual data points.
            </summary>
        </member>
        <member name="P:Metrolib.ILineSeries.PointRadius">
            <summary>
                The radius to draw the circle, representing individual data points.
            </summary>
        </member>
        <member name="P:Metrolib.ILineSeries.Values">
            <summary>
                The values to display.
            </summary>
            <remarks>
                Values are assumed to be ordered ascending by their <see cref="P:System.Windows.Point.X" /> value.
                If this is not the case then the wrong data might be displayed.
            </remarks>
        </member>
        <member name="P:Metrolib.ILineSeries.XRange">
            <summary>
                The minimum and maximum x values in <see cref="P:Metrolib.ILineSeries.Values" />.
            </summary>
        </member>
        <member name="P:Metrolib.ILineSeries.YRange">
            <summary>
                The minimum and maximum y values in <see cref="P:Metrolib.ILineSeries.Values" />.
            </summary>
        </member>
        <member name="M:Metrolib.ILineSeries.GetXValue(System.Double)">
            <summary>
                Returns the value that should be displayed instead of the given numerical value.
                Is used to annotate axes and popups / tooltips.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Metrolib.ILineSeries.GetYValue(System.Double)">
            <summary>
                Returns the value that should be displayed instead of the given numerical value.
                Is used to annotate axes and popups / tooltips.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:Metrolib.LineChart">
            <summary>
            </summary>
        </member>
        <member name="F:Metrolib.LineChart.ChartTypeProperty">
            <summary>
                Definition of the <see cref="P:Metrolib.LineChart.ChartType" /> dependency property.
            </summary>
        </member>
        <member name="F:Metrolib.LineChart.SeriesProperty">
            <summary>
            </summary>
        </member>
        <member name="F:Metrolib.LineChart.XAxisProperty">
            <summary>
                Definition of the <see cref="P:Metrolib.LineChart.XAxis" /> dependency property.
            </summary>
        </member>
        <member name="F:Metrolib.LineChart.YAxisProperty">
            <summary>
                Definition of the <see cref="P:Metrolib.LineChart.YAxis" /> dependency property.
            </summary>
        </member>
        <member name="F:Metrolib.LineChart.CanvasProperty">
            <summary>
                Definition of the <see cref="P:Metrolib.LineChart.Canvas" /> dependency property.
            </summary>
        </member>
        <member name="M:Metrolib.LineChart.#ctor">
            <summary>
                Initializes this <see cref="T:Metrolib.LineChart" />.
            </summary>
        </member>
        <member name="P:Metrolib.LineChart.YAxis">
            <summary>
                Definition of the y-axis.
            </summary>
        </member>
        <member name="P:Metrolib.LineChart.XAxis">
            <summary>
                Definition of the x-axis.
            </summary>
        </member>
        <member name="P:Metrolib.LineChart.ChartType">
            <summary>
                Defines how the <see cref="P:Metrolib.LineChart.Series" /> should be displayed.
            </summary>
        </member>
        <member name="P:Metrolib.LineChart.Canvas">
            <summary>
                The canvas used to actually draw the series.
                Used for testing.
            </summary>
        </member>
        <member name="P:Metrolib.LineChart.Series">
            <summary>
            </summary>
        </member>
        <member name="M:Metrolib.LineChart.OnApplyTemplate">
            <summary>
                Called when the template's tree is generated.
            </summary>
        </member>
        <member name="T:Metrolib.LineChartType">
            <summary>
                Lists various "types" one or more <see cref="T:Metrolib.ILineSeries" /> can be displayed.
            </summary>
        </member>
        <member name="F:Metrolib.LineChartType.Normal">
            <summary>
                One line per <see cref="T:Metrolib.ILineSeries" />.
                The area under the line may be filled out, but a translucient fill brush is
                recommended in case more than one series is displayed.
            </summary>
        </member>
        <member name="F:Metrolib.LineChartType.Stacked">
            <summary>
                One line per <see cref="T:Metrolib.ILineSeries" />, however each series sits on top of
                the previous one. When this is used, <see cref="P:Metrolib.ILineSeries.Fill" /> should
                be set to the user understands this fact.
            </summary>
        </member>
        <member name="T:Metrolib.LineSeries">
            <summary>
            </summary>
        </member>
        <member name="M:Metrolib.LineSeries.#ctor">
            <summary>
            </summary>
        </member>
        <member name="P:Metrolib.LineSeries.Count">
            <summary>
                The amount of points in <see cref="P:Metrolib.LineSeries.Values" />.
            </summary>
        </member>
        <member name="M:Metrolib.LineSeries.GetXValue(System.Double)">
            <summary>
                Returns the value that should be displayed instead of the given numerical value.
                Is used to annotate axes and popups / tooltips.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Metrolib.LineSeries.GetYValue(System.Double)">
            <summary>
                Returns the value that should be displayed instead of the given numerical value.
                Is used to annotate axes and popups / tooltips.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="P:Metrolib.LineSeries.Outline">
            <summary>
                The pen to draw the outline of this series with, if any.
            </summary>
        </member>
        <member name="P:Metrolib.LineSeries.Fill">
            <summary>
                The brush to fill the area under this series, if any.
            </summary>
        </member>
        <member name="P:Metrolib.LineSeries.PointOutline">
            <summary>
                The pen to draw the outline of the shape, representing individual data points.
            </summary>
        </member>
        <member name="P:Metrolib.LineSeries.PointFill">
            <summary>
                The brush to fill the shape, representing individual data points.
            </summary>
        </member>
        <member name="P:Metrolib.LineSeries.PointRadius">
            <summary>
                The radius to draw the circle, representing individual data points.
            </summary>
        </member>
        <member name="P:Metrolib.LineSeries.Values">
            <summary>
                The values to display.
            </summary>
            <remarks>
                Values are assumed to be ordered ascending by their <see cref="P:System.Windows.Point.X" /> value.
                If this is not the case then the wrong data might be displayed.
            </remarks>
        </member>
        <member name="P:Metrolib.LineSeries.XRange">
            <summary>
                The minimum and maximum x values in <see cref="P:Metrolib.LineSeries.Values" />.
            </summary>
        </member>
        <member name="P:Metrolib.LineSeries.YRange">
            <summary>
                The minimum and maximum y values in <see cref="P:Metrolib.LineSeries.Values" />.
            </summary>
        </member>
        <member name="E:Metrolib.LineSeries.PropertyChanged">
            <summary>
            </summary>
        </member>
        <member name="T:Metrolib.Camera">
            <summary>
                The camera of a <see cref="T:Metrolib.MapView" /> that controls which portion of the map is visible.
            </summary>
        </member>
        <member name="P:Metrolib.Camera.Position">
            <summary>
                The current position of the camera ("center" of the map view).
            </summary>
        </member>
        <member name="P:Metrolib.Camera.ViewSize">
            <summary>
                Width and height of view space.
            </summary>
        </member>
        <member name="P:Metrolib.Camera.Width">
            <summary>
                Width of view space.
            </summary>
        </member>
        <member name="P:Metrolib.Camera.Height">
            <summary>
                Height of view space.
            </summary>
        </member>
        <member name="P:Metrolib.Camera.VisibleViewRectangle">
            <summary>
                Rectangle defining visible view space.
            </summary>
        </member>
        <member name="P:Metrolib.Camera.VisibleMercatorRectangle">
            <summary>
                Rectangle definining visible portion of mercator space.
            </summary>
        </member>
        <member name="M:Metrolib.Camera.ToView(Metrolib.Geography.GeoLocation)">
            <summary>
                Transforms a point WGS 84 space to view space.
            </summary>
            <param name="location"></param>
            <returns></returns>
        </member>
        <member name="M:Metrolib.Camera.ToScene(System.Windows.Point)">
            <summary>
                Transforms a point from view space to mercator space.
            </summary>
            <param name="pos"></param>
            <returns></returns>
        </member>
        <member name="M:Metrolib.Camera.ToScene(System.Windows.Rect)">
            <summary>
                Transform a rectangle from view space to mercator space.
            </summary>
            <param name="rect"></param>
            <returns></returns>
        </member>
        <member name="M:Metrolib.Camera.ToView(Metrolib.Geography.MercatorLocation)">
            <summary>
                Transforms a point from mercator space to view space.
            </summary>
            <param name="location"></param>
            <returns></returns>
        </member>
        <member name="M:Metrolib.Camera.ToView(GeoVis.MercatorRectangle)">
            <summary>
                Transforms a rectangle from mercator space to view space.
            </summary>
            <param name="rect"></param>
            <returns></returns>
        </member>
        <member name="T:Metrolib.MapViewItem">
            <summary>
                Control representing an item in the map.
            </summary>
        </member>
        <member name="F:Metrolib.MapViewItem.IsSelectedProperty">
            <summary>
                Definition of the <see cref="P:Metrolib.MapViewItem.IsSelected" /> dependency property.
            </summary>
        </member>
        <member name="P:Metrolib.MapViewItem.IsSelected">
            <summary>
                Whether or not this item is selected.
            </summary>
        </member>
        <member name="T:Metrolib.ItemsLayer">
            <summary>
                A layer capable of displaying a list of items in a <see cref="T:Metrolib.MapView" />.
            </summary>
            <remarks>
                You can specify a different <see cref="P:Metrolib.ItemsLayer.ItemType" /> to change the <see cref="T:System.Windows.Controls.ContentPresenter" />
                that presents the item. By default a <see cref="T:Metrolib.MapViewPointItem" /> is used.
            </remarks>
            <remarks>
                You can specify a <see cref="T:System.Windows.DataTemplate" /> or <see cref="T:System.Windows.Controls.DataTemplateSelector" /> to
                define how an item is to be displayed.
            </remarks>
            <remarks>
                If a <see cref="P:Metrolib.ItemsLayer.MaximumItemSize" /> is specified, the layer attempts to create <see cref="T:System.Windows.Controls.ContentPresenter" />
                for visible items only (what's known as virtualization)..
            </remarks>
        </member>
        <member name="F:Metrolib.ItemsLayer.ItemTypeProperty">
            <summary>
                Definition of the <see cref="P:Metrolib.ItemsLayer.ItemType" /> dependency property.
            </summary>
        </member>
        <member name="F:Metrolib.ItemsLayer.MaximumItemSizeProperty">
            <summary>
                Definition of the <see cref="P:Metrolib.ItemsLayer.MaximumItemSize" /> dependency property.
            </summary>
        </member>
        <member name="F:Metrolib.ItemsLayer.SupportsVirtualizationProperty">
            <summary>
                Definition of the <see cref="P:Metrolib.ItemsLayer.SupportsVirtualization" /> dependency property.
            </summary>
        </member>
        <member name="F:Metrolib.ItemsLayer.ItemTemplateProperty">
            <summary>
                Definition of the <see cref="P:Metrolib.ItemsLayer.ItemTemplate" /> dependency property.
            </summary>
        </member>
        <member name="F:Metrolib.ItemsLayer.ItemTemplateSelectorProperty">
            <summary>
                Definition of the <see cref="P:Metrolib.ItemsLayer.ItemTemplateSelector" /> dependency property.
            </summary>
        </member>
        <member name="F:Metrolib.ItemsLayer.ItemsSourceProperty">
            <summary>
                Definition of the <see cref="P:Metrolib.ItemsLayer.ItemsSource" /> dependency property.
            </summary>
        </member>
        <member name="P:Metrolib.ItemsLayer.ItemType">
            <summary>
                The type of <see cref="T:Metrolib.MapViewItem" /> that shall be used as <see cref="T:System.Windows.Controls.ContentPresenter" />.
            </summary>
        </member>
        <member name="P:Metrolib.ItemsLayer.SupportsVirtualization">
            <summary>
                Whether or not this layer currently supports virtualization.
            </summary>
        </member>
        <member name="P:Metrolib.ItemsLayer.MaximumItemSize">
            <summary>
                The maximum size of an item.
            </summary>
            <remarks>
                If set to a non-zero value, then virtualization is enabled.
            </remarks>
        </member>
        <member name="P:Metrolib.ItemsLayer.ItemTemplateSelector">
            <summary>
                The data template selector, responsible for finding the template to represent an item.
            </summary>
        </member>
        <member name="P:Metrolib.ItemsLayer.ItemTemplate">
            <summary>
                The data template to represent an item.
            </summary>
        </member>
        <member name="P:Metrolib.ItemsLayer.ItemsSource">
            <summary>
                The items to display.
            </summary>
        </member>
        <member name="T:Metrolib.MapViewPointItem">
            <summary>
                Control representing a point on the map as a push pin.
            </summary>
        </member>
        <member name="T:Metrolib.AbstractProgressBar">
            <summary>
                Base class for progress bars of this library.
            </summary>
        </member>
        <member name="F:Metrolib.AbstractProgressBar.RelativeValueProperty">
            <summary>
                Definition of the <see cref="P:Metrolib.AbstractProgressBar.RelativeValue" /> dependency property.
            </summary>
        </member>
        <member name="P:Metrolib.AbstractProgressBar.RelativeValue">
            <summary>
                The <see cref="!:ProgressBar.Value" />, scaled between [0, 1] with respect
                to <see cref="!:ProgressBar.Minimum" /> and <see cref="!:ProgressBar.Maximum" />.
            </summary>
        </member>
        <member name="T:Metrolib.FlatProgressBar">
            <summary>
                A progress bar in a "flat" style.
                Displays the relative value as 'X%' in the progress bar.
            </summary>
        </member>
        <member name="F:Metrolib.FlatProgressBar.IndeterminateValueProperty">
            <summary>
                Definition of the <see cref="P:Metrolib.FlatProgressBar.IndeterminateValue" /> dependency property.
            </summary>
        </member>
        <member name="M:Metrolib.FlatProgressBar.#ctor">
            <summary>
                Initializes this object.
            </summary>
        </member>
        <member name="P:Metrolib.FlatProgressBar.IndeterminateValue">
            <summary>
                The relative value used in favour of <see cref="!:ProgressBar.Value" /> when this one is
                <see cref="P:System.Windows.Controls.ProgressBar.IsIndeterminate" />.
            </summary>
        </member>
        <member name="M:Metrolib.FlatProgressBar.OnApplyTemplate">
            <summary>
                Called when the template's tree is generated.
            </summary>
        </member>
        <member name="T:Metrolib.DelegateCommand2">
            <summary>
                A simple <see cref="T:System.Windows.Input.ICommand" /> implementation which forwards command invocations
                to the action given during construction. <see cref="P:Metrolib.DelegateCommand2.CanBeExecuted" /> controls whether
                or not the command can be executed and is set to true by default.
            </summary>
        </member>
        <member name="M:Metrolib.DelegateCommand2.#ctor(System.Action)">
            <summary>
                Initializes this command: The given action will be invoked when this command is executed.
            </summary>
            <param name="fn"></param>
        </member>
        <member name="P:Metrolib.DelegateCommand2.CanBeExecuted">
            <summary>
                Whether or not this command can be executed.
                Set this property when this shall change.
            </summary>
        </member>
        <member name="M:Metrolib.DelegateCommand2.CanExecute(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Metrolib.DelegateCommand2.Execute(System.Object)">
            <inheritdoc />
        </member>
        <member name="E:Metrolib.DelegateCommand2.CanExecuteChanged">
            <inheritdoc />
        </member>
        <member name="T:Metrolib.ListSliceDebugView`1">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:Metrolib.ReadOnlyListExtensions">
            <summary>
            </summary>
            <remarks>
                TODO: Move to separate project (maybe BCL extensions or something like that).
            </remarks>
        </member>
        <member name="M:Metrolib.ReadOnlyListExtensions.Slice``1(System.Collections.Generic.IReadOnlyList{``0},System.Int32,System.Int32)">
            <summary>
                Creates a new slice onto this list that represents the portion identified
                by the given index and count.
            </summary>
            <remarks>
                DOES NOT PERFORM ANY COPY. MODIFICATIONS TO THIS LIST AFTER SLICE WILL HAVE SIDE
                EFFECTS FOR THE CREATED SLICES.
            </remarks>
            <typeparam name="T"></typeparam>
            <param name="that"></param>
            <param name="startIndex"></param>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="M:Metrolib.ReadOnlyListExtensions.Slice``1(System.Collections.Generic.IReadOnlyList{``0},System.Int32)">
            <summary>
                Creates a new slice onto this list that represents the portion of this list
                from the given index until the end.
            </summary>
            <remarks>
                DOES NOT PERFORM ANY COPY. MODIFICATIONS TO THIS LIST AFTER SLICE WILL HAVE SIDE
                EFFECTS FOR THE CREATED SLICES.
            </remarks>
            <typeparam name="T"></typeparam>
            <param name="that"></param>
            <param name="startIndex"></param>
            <returns></returns>
        </member>
        <member name="T:Metrolib.ListSlice`1">
            <summary>
                Represents a slice onto a source collection.
            </summary>
            <remarks>
                TODO: Move to separate project (maybe BCL extensions or something like that).
            </remarks>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Metrolib.ListSlice`1.GetEnumerator">
            <inheritdoc />
        </member>
        <member name="P:Metrolib.ListSlice`1.Count">
            <inheritdoc />
        </member>
        <member name="P:Metrolib.ListSlice`1.Item(System.Int32)">
            <inheritdoc />
        </member>
        <member name="T:Metrolib.Converters.AbstractNumericListToStringConverter`1">
            <summary>
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Metrolib.Converters.AbstractNumericListToStringConverter`1.#ctor">
            <summary>
                Initializes this converter, sets all properties to their default values.
            </summary>
        </member>
        <member name="P:Metrolib.Converters.AbstractNumericListToStringConverter`1.Separator">
            <summary>
                The separator used to separate multiple values.
                Set to ", " by default.
            </summary>
            <example>
                1, 2, 3
            </example>
        </member>
        <member name="P:Metrolib.Converters.AbstractNumericListToStringConverter`1.RangeConnector">
            <summary>
                The string used to denote a range between of values between two ends.
                Set to "-" by default.
            </summary>
            <example>
                1-3
            </example>
        </member>
        <member name="P:Metrolib.Converters.AbstractNumericListToStringConverter`1.MaximumAllowedRange">
            <summary>
                The maximum number of values that are expanded when the user
                enters a range. Exists to prevent input such as "0-int.Max"
                from blocking the UI thread for too long and eating a huge amount of
                memory.
                If you want the user to input such huge lists of ranges, then binding
                to an explicit list of values is not the right way, anyways...
            </summary>
        </member>
        <member name="M:Metrolib.Converters.AbstractNumericListToStringConverter`1.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <inheritdoc />
        </member>
        <member name="M:Metrolib.Converters.AbstractNumericListToStringConverter`1.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <inheritdoc />
        </member>
        <member name="M:Metrolib.Converters.AbstractNumericListToStringConverter`1.AreAdjacent(`0,`0)">
            <summary>
                Tests whether the two given values are adjacent to each other.
                If set to true, then they will be written as "lhs - rhs" instead
                of "lhs, rhs".
            </summary>
            <param name="lhs"></param>
            <param name="rhs"></param>
            <returns></returns>
        </member>
        <member name="M:Metrolib.Converters.AbstractNumericListToStringConverter`1.GetRange(`0,`0)">
            <summary>
                Returns a range of values that encompasses [firstValue, lastValue].
            </summary>
            <param name="firstValue"></param>
            <param name="lastValue"></param>
            <returns></returns>
        </member>
        <member name="M:Metrolib.Converters.AbstractNumericListToStringConverter`1.TryParse(System.String,`0@,System.Globalization.CultureInfo)">
            <summary>
                Tries to parse the given string into a value, if possible.
            </summary>
            <param name="part"></param>
            <param name="value"></param>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="T:Metrolib.Converters.ByteToStringConverter">
            <summary>
                Converts values of type <see cref="T:System.Byte" /> to <see cref="T:System.String" /> and vice verca.
            </summary>
        </member>
        <member name="M:Metrolib.Converters.ByteToStringConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <inheritdoc />
        </member>
        <member name="M:Metrolib.Converters.ByteToStringConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <inheritdoc />
        </member>
        <member name="T:Metrolib.Converters.DoubleToPercentageConverter">
            <summary>
                Converts a relative double value to a string in the form of X%.
                0 yields 0%
                1 yields 100%
                0.5 yields 50%
                0.55 yields 55%
                0.555 yields 56%
            </summary>
            <remarks>
                Does not display any digits after the decimal point.
            </remarks>
        </member>
        <member name="M:Metrolib.Converters.DoubleToPercentageConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <inheritdoc />
        </member>
        <member name="M:Metrolib.Converters.DoubleToPercentageConverter.System#Windows#Data#IValueConverter#ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <inheritdoc />
        </member>
        <member name="T:Metrolib.Converters.EmptyToCollapsedConverter">
            <summary>
                Converts any <see cref="T:System.Collections.IEnumerable" /> that contains at least one value
                to <see cref="F:System.Windows.Visibility.Visible" />. If it is empty, then <see cref="F:System.Windows.Visibility.Collapsed" />
                is returned. Anything else yields null.
            </summary>
        </member>
        <member name="M:Metrolib.Converters.EmptyToCollapsedConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <inheritdoc />
        </member>
        <member name="M:Metrolib.Converters.EmptyToCollapsedConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <inheritdoc />
        </member>
        <member name="T:Metrolib.Converters.EmptyToHiddenConverter">
            <summary>
                Converts any <see cref="T:System.Collections.IEnumerable" /> that contains at least one value
                to <see cref="F:System.Windows.Visibility.Visible" />. If it is empty, then <see cref="F:System.Windows.Visibility.Hidden" />
                is returned. Anything else yields null.
            </summary>
        </member>
        <member name="M:Metrolib.Converters.EmptyToHiddenConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <inheritdoc />
        </member>
        <member name="M:Metrolib.Converters.EmptyToHiddenConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <inheritdoc />
        </member>
        <member name="T:Metrolib.Converters.GeoLocationConverter">
            <summary>
                Responsible of converting strings to a <see cref="T:Metrolib.Geography.GeoLocation" />.
            </summary>
        </member>
        <member name="F:Metrolib.Converters.GeoLocationConverter.LatitudeLongitudeRegex">
            <summary>
            </summary>
        </member>
        <member name="M:Metrolib.Converters.GeoLocationConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
                Returns whether this converter can convert an object of the given type to the type of this converter, using the specified context.
            </summary>
            <param name="context"></param>
            <param name="sourceType"></param>
            <returns></returns>
        </member>
        <member name="M:Metrolib.Converters.GeoLocationConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
                Returns whether this converter can convert the object to the specified type, using the specified context.
            </summary>
            <param name="context"></param>
            <param name="destinationType"></param>
            <returns></returns>
        </member>
        <member name="M:Metrolib.Converters.GeoLocationConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
                Converts the given object to the type of this converter, using the specified context and culture information.
            </summary>
            <param name="context"></param>
            <param name="culture"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Metrolib.Converters.GeoLocationConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
                Converts the given value object to the specified type, using the specified context and culture information.
            </summary>
            <param name="context"></param>
            <param name="culture"></param>
            <param name="value"></param>
            <param name="destinationType"></param>
            <returns></returns>
        </member>
        <member name="T:Metrolib.Converters.Int32ListToStringConverter">
            <summary>
            Responsible for converting a list of numbers into a string representation and back.
            </summary>
            <example>
            Convert({}) returns ""
            Convert({1}) returns "1"
            Convert({1, 3}) returns "1, 3"
            Convert({1, 2, 3}) returns "1-3"
            Convert({1, 4, 5, 6, 7}) returns "1, 4-7"
            </example>
        </member>
        <member name="M:Metrolib.Converters.Int32ListToStringConverter.AreAdjacent(System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Metrolib.Converters.Int32ListToStringConverter.GetRange(System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Metrolib.Converters.Int32ListToStringConverter.TryParse(System.String,System.Int32@,System.Globalization.CultureInfo)">
            <inheritdoc />
        </member>
        <member name="T:Metrolib.Converters.NonEmptyToCollapsedConverter">
            <summary>
                Converts any <see cref="T:System.Collections.IEnumerable" /> that contains at least one value
                to <see cref="F:System.Windows.Visibility.Collapsed" />. If it is empty, then <see cref="F:System.Windows.Visibility.Visible" />
                is returned. Anything else yields null.
            </summary>
        </member>
        <member name="M:Metrolib.Converters.NonEmptyToCollapsedConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <inheritdoc />
        </member>
        <member name="M:Metrolib.Converters.NonEmptyToCollapsedConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <inheritdoc />
        </member>
        <member name="T:Metrolib.Converters.NonEmptyToHiddenConverter">
            <summary>
                Converts any <see cref="T:System.Collections.IEnumerable" /> that contains at least one value
                to <see cref="F:System.Windows.Visibility.Hidden" />. If it is empty, then <see cref="F:System.Windows.Visibility.Visible" />
                is returned. Anything else yields null.
            </summary>
        </member>
        <member name="M:Metrolib.Converters.NonEmptyToHiddenConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <inheritdoc />
        </member>
        <member name="M:Metrolib.Converters.NonEmptyToHiddenConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <inheritdoc />
        </member>
        <member name="T:Metrolib.Converters.NullImageConverter">
            <summary>
                To be used when one plans to bind a null value to a <see cref="P:System.Windows.Controls.Image.Source" />.
                Without this converter, an error is written to the output log that null is not a valid value for the binding.
            </summary>
        </member>
        <member name="M:Metrolib.Converters.NullImageConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <inheritdoc />
        </member>
        <member name="M:Metrolib.Converters.NullImageConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <inheritdoc />
        </member>
        <member name="T:Metrolib.Converters.NullToCollapsedConverter">
            <summary>
                Converts null to <see cref="F:System.Windows.Visibility.Visible" />, anything else to <see cref="F:System.Windows.Visibility.Visible" />.
            </summary>
        </member>
        <member name="M:Metrolib.Converters.NullToCollapsedConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <inheritdoc />
        </member>
        <member name="M:Metrolib.Converters.NullToCollapsedConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <inheritdoc />
        </member>
        <member name="T:Metrolib.Converters.NullToHiddenConverter">
            <summary>
                Converts null to <see cref="F:System.Windows.Visibility.Visible" />, anything else to <see cref="F:System.Windows.Visibility.Visible" />.
            </summary>
        </member>
        <member name="M:Metrolib.Converters.NullToHiddenConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <inheritdoc />
        </member>
        <member name="M:Metrolib.Converters.NullToHiddenConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <inheritdoc />
        </member>
        <member name="T:Metrolib.Converters.NullToVisibleConverter">
            <summary>
                Converts null to <see cref="F:System.Windows.Visibility.Visible" />, anything else to <see cref="F:System.Windows.Visibility.Collapsed" />.
            </summary>
        </member>
        <member name="M:Metrolib.Converters.NullToVisibleConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <inheritdoc />
        </member>
        <member name="M:Metrolib.Converters.NullToVisibleConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <inheritdoc />
        </member>
        <member name="T:Metrolib.Converters.UInt32ToStringConverter">
            <summary>
                Converts values of type <see cref="T:System.UInt32" /> to <see cref="T:System.String" /> and vice verca.
            </summary>
        </member>
        <member name="M:Metrolib.Converters.UInt32ToStringConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <inheritdoc />
        </member>
        <member name="M:Metrolib.Converters.UInt32ToStringConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <inheritdoc />
        </member>
        <member name="T:Metrolib.Converters.UInt16ToStringConverter">
            <summary>
                Converts values of type <see cref="T:System.UInt16" /> to <see cref="T:System.String" /> and vice verca.
            </summary>
        </member>
        <member name="M:Metrolib.Converters.UInt16ToStringConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <inheritdoc />
        </member>
        <member name="M:Metrolib.Converters.UInt16ToStringConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <inheritdoc />
        </member>
        <member name="T:Metrolib.Converters.UInt32ListToStringConverter">
            <summary>
            Responsible for converting a list of numbers into a string representation and back.
            </summary>
            <example>
            Convert({}) returns ""
            Convert({1}) returns "1"
            Convert({1, 3}) returns "1, 3"
            Convert({1, 2, 3}) returns "1-3"
            Convert({1, 4, 5, 6, 7}) returns "1, 4-7"
            </example>
        </member>
        <member name="M:Metrolib.Converters.UInt32ListToStringConverter.AreAdjacent(System.UInt32,System.UInt32)">
            <inheritdoc />
        </member>
        <member name="M:Metrolib.Converters.UInt32ListToStringConverter.GetRange(System.UInt32,System.UInt32)">
            <inheritdoc />
        </member>
        <member name="M:Metrolib.Converters.UInt32ListToStringConverter.TryParse(System.String,System.UInt32@,System.Globalization.CultureInfo)">
            <inheritdoc />
        </member>
        <member name="T:Metrolib.Converters.UInt64ToStringConverter">
            <summary>
                Converts values of type <see cref="T:System.UInt64" /> to <see cref="T:System.String" /> and vice verca.
            </summary>
        </member>
        <member name="M:Metrolib.Converters.UInt64ToStringConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <inheritdoc />
        </member>
        <member name="M:Metrolib.Converters.UInt64ToStringConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <inheritdoc />
        </member>
        <member name="T:Metrolib.Converters.DoubleToThicknessConverter">
            <summary>
                Converts a <see cref="T:System.Double" /> value to a <see cref="T:System.Windows.Thickness" />.
            </summary>
        </member>
        <member name="M:Metrolib.Converters.DoubleToThicknessConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <inheritdoc />
        </member>
        <member name="M:Metrolib.Converters.DoubleToThicknessConverter.System#Windows#Data#IValueConverter#ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <inheritdoc />
        </member>
        <member name="T:Metrolib.Converters.BoolFalseToHiddenConverter">
            <summary>
                Converts false to <see cref="F:System.Windows.Visibility.Hidden" />, true to <see cref="F:System.Windows.Visibility.Visible" /> and anything else
                to null.
            </summary>
        </member>
        <member name="M:Metrolib.Converters.BoolFalseToHiddenConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <inheritdoc />
        </member>
        <member name="M:Metrolib.Converters.BoolFalseToHiddenConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <inheritdoc />
        </member>
        <member name="T:Metrolib.Converters.BoolTrueToHiddenConverter">
            <summary>
                Converts true to <see cref="F:System.Windows.Visibility.Hidden" />, false to <see cref="F:System.Windows.Visibility.Visible" /> and anything else
                to null.
            </summary>
        </member>
        <member name="M:Metrolib.Converters.BoolTrueToHiddenConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <inheritdoc />
        </member>
        <member name="M:Metrolib.Converters.BoolTrueToHiddenConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <inheritdoc />
        </member>
        <member name="T:Metrolib.Converters.CountConverter">
            <summary>
                Responsible for converting (big) numbers to readable text, omitting uninteresting decimals, e.g.
                12.344.112 becomes 12M.
            </summary>
        </member>
        <member name="M:Metrolib.Converters.CountConverter.#ctor">
            <summary>
                Initializes this converter.
            </summary>
        </member>
        <member name="P:Metrolib.Converters.CountConverter.Suffix">
            <summary>
                The suffic that should be added to the final string.
            </summary>
        </member>
        <member name="P:Metrolib.Converters.CountConverter.HasPlural">
            <summary>
                Whether or not a plural 's' should be added to the suffix when the remaining count
                is not 1.
            </summary>
        </member>
        <member name="M:Metrolib.Converters.CountConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <inheritdoc />
        </member>
        <member name="M:Metrolib.Converters.CountConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <inheritdoc />
            <returns></returns>
        </member>
        <member name="T:Metrolib.Converters.IncrementByOneConverter">
            <summary>
                Increments the given value by 1.
            </summary>
        </member>
        <member name="M:Metrolib.Converters.IncrementByOneConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <inheritdoc />
        </member>
        <member name="M:Metrolib.Converters.IncrementByOneConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <inheritdoc />
        </member>
        <member name="T:Metrolib.Converters.NonEmptyStringToVisibleConverter">
            <summary>
                A value converter that converts non-empty strings to <see cref="F:System.Windows.Visibility.Visible" /> and everything
                else to <see cref="F:System.Windows.Visibility.Collapsed" />.
            </summary>
        </member>
        <member name="M:Metrolib.Converters.NonEmptyStringToVisibleConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <inheritdoc />
        </member>
        <member name="M:Metrolib.Converters.NonEmptyStringToVisibleConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <inheritdoc />
        </member>
        <member name="T:Metrolib.Converters.NullOrEmptyStringToVisibleConverter">
            <summary>
                This converter converts an empty or null string to Visible, anything else to Collapsed.
            </summary>
        </member>
        <member name="M:Metrolib.Converters.NullOrEmptyStringToVisibleConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <inheritdoc />
        </member>
        <member name="M:Metrolib.Converters.NullOrEmptyStringToVisibleConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <inheritdoc />
        </member>
        <member name="T:Metrolib.Converters.InvertBoolConverter">
            <summary>
                Inverts the given boolean value.
                Returns null if no boolean value was given.
            </summary>
        </member>
        <member name="M:Metrolib.Converters.InvertBoolConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <inheritdoc />
        </member>
        <member name="M:Metrolib.Converters.InvertBoolConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <inheritdoc />
        </member>
        <member name="T:Metrolib.Converters.MultiplierConverter">
            <summary>
                Multiplies the given numeric value with the given <see cref="P:Metrolib.Converters.MultiplierConverter.Multiplier" />.
            </summary>
        </member>
        <member name="P:Metrolib.Converters.MultiplierConverter.Multiplier">
            <summary>
                The value used to multiply any value given to <see cref="M:Metrolib.Converters.MultiplierConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)" />.
            </summary>
        </member>
        <member name="M:Metrolib.Converters.MultiplierConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <inheritdoc />
        </member>
        <member name="M:Metrolib.Converters.MultiplierConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <inheritdoc />
        </member>
        <member name="T:Metrolib.Converters.NegateConverter">
            <summary>
                A converter that negates any given signed number.
                Supports <see cref="T:System.Decimal" />, <see cref="T:System.Double" />, <see cref="T:System.Single" />,
                <see cref="T:System.Int64" />, <see cref="T:System.Int32" />, <see cref="T:System.Int16" /> and <see cref="T:System.SByte" />.
            </summary>
        </member>
        <member name="M:Metrolib.Converters.NegateConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <inheritdoc />
        </member>
        <member name="M:Metrolib.Converters.NegateConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <inheritdoc />
        </member>
        <member name="T:Metrolib.Converters.TimeSpanConverter">
            <summary>
                A value converter that converts <see cref="T:System.TimeSpan" /> values into a written representation that rounds down
                to the nearest unit:
                - n milisecond(s)
                - n second(s)
                - n minute(s)
                - n hour(s)
                - n day(s)
                - n week(s)
                - n year(s)
                - n decade(s)
            </summary>
        </member>
        <member name="M:Metrolib.Converters.TimeSpanConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <inheritdoc />
        </member>
        <member name="M:Metrolib.Converters.TimeSpanConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <inheritdoc />
        </member>
        <member name="T:Metrolib.Converters.BoolFalseToCollapsedConverter">
            <summary>
                Converts false to <see cref="F:System.Windows.Visibility.Collapsed" />, true to <see cref="F:System.Windows.Visibility.Visible" />
                and anything else to null.
            </summary>
        </member>
        <member name="M:Metrolib.Converters.BoolFalseToCollapsedConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <inheritdoc />
        </member>
        <member name="M:Metrolib.Converters.BoolFalseToCollapsedConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <inheritdoc />
        </member>
        <member name="T:Metrolib.Converters.BoolTrueToCollapsedConverter">
            <summary>
                Converts true to <see cref="F:System.Windows.Visibility.Collapsed" />, false to <see cref="F:System.Windows.Visibility.Visible" />
                and anything else to null.
            </summary>
        </member>
        <member name="M:Metrolib.Converters.BoolTrueToCollapsedConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <inheritdoc />
        </member>
        <member name="M:Metrolib.Converters.BoolTrueToCollapsedConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <inheritdoc />
        </member>
        <member name="T:Metrolib.FocusExtension">
            <summary>
                Defines the <see cref="F:Metrolib.FocusExtension.IsFocusedProperty" /> attached dependency property.
                Can be used to control the focus of a control from a view model.
            </summary>
        </member>
        <member name="T:Metrolib.Geography.GeoLocation">
            <summary>
                Represents a point on earth in WGS84 space.
            </summary>
        </member>
        <member name="F:Metrolib.Geography.GeoLocation.Zero">
            <summary>
                Where the equator and null meridian meet.
            </summary>
        </member>
        <member name="P:Metrolib.Geography.GeoLocation.Latitude">
            <summary>
                Latitude value of this location.
            </summary>
        </member>
        <member name="P:Metrolib.Geography.GeoLocation.Longitude">
            <summary>
                Longitude value of this location.
            </summary>
        </member>
        <member name="M:Metrolib.Geography.GeoLocation.ToString">
            <summary>
                Returns a string that represents the current object.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Metrolib.Geography.MercatorLocation">
            <summary>
                Represents a point on earth in mercator space.
            </summary>
        </member>
        <member name="F:Metrolib.Geography.MercatorLocation.Scale">
            <summary>
            The scale parameter of the mercator projection.
            </summary>
        </member>
        <member name="F:Metrolib.Geography.MercatorLocation.MinY">
            <summary>
                Minimum y-coordinate value.
            </summary>
        </member>
        <member name="F:Metrolib.Geography.MercatorLocation.MaxY">
            <summary>
                Maximum y-coordinate value.
            </summary>
        </member>
        <member name="F:Metrolib.Geography.MercatorLocation.MinX">
            <summary>
                Minimum x-coordinate value.
            </summary>
        </member>
        <member name="F:Metrolib.Geography.MercatorLocation.MaxX">
            <summary>
                Maximum x-coordinate value.
            </summary>
        </member>
        <member name="F:Metrolib.Geography.MercatorLocation.Width">
            <summary>
                Width of mercator space.
            </summary>
        </member>
        <member name="F:Metrolib.Geography.MercatorLocation.Height">
            <summary>
                Height of mercator space.
            </summary>
        </member>
        <member name="F:Metrolib.Geography.MercatorLocation.Min">
            <summary>
            The point with the minimum x- and y-coordinate values.
            </summary>
        </member>
        <member name="F:Metrolib.Geography.MercatorLocation.Max">
            <summary>
            The point with the maximum x- and y-coordinate values.
            </summary>
        </member>
        <member name="F:Metrolib.Geography.MercatorLocation.Zero">
            <summary>
                The center of mercator space (concident with <see cref="F:Metrolib.Geography.GeoLocation.Zero" />).
            </summary>
        </member>
        <member name="M:Metrolib.Geography.MercatorLocation.#ctor(System.Double,System.Double)">
            <summary>
                Initializes a new
            </summary>
            <param name="x"></param>
            <param name="y"></param>
        </member>
        <member name="P:Metrolib.Geography.MercatorLocation.X">
            <summary>
                The x-coordinate value of this location.
            </summary>
        </member>
        <member name="P:Metrolib.Geography.MercatorLocation.Y">
            <summary>
                The y-coordinate value of this location.
            </summary>
        </member>
        <member name="M:Metrolib.Geography.MercatorLocation.ToString">
            <summary>
                Returns a string that represents the current object.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Metrolib.Geography.MercatorLocation.op_Explicit(Metrolib.Geography.MercatorLocation)~Metrolib.Geography.GeoLocation">
            <summary>
                Projects this point into WGS 84 space.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Metrolib.Geography.MercatorLocation.op_Explicit(Metrolib.Geography.GeoLocation)~Metrolib.Geography.MercatorLocation">
            <summary>
                Projects the given point into mercator space.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:Metrolib.Layer">
            <summary>
                Base class for a layer of a <see cref="T:Metrolib.MapView" />.
            </summary>
            <remarks>
                The most used layer is a <see cref="T:Metrolib.ItemsLayer" />.
            </remarks>
        </member>
        <member name="T:Metrolib.LayerCollection">
            <summary>
                A list of layers of a <see cref="T:Metrolib.MapView" />.
            </summary>
        </member>
        <member name="M:Metrolib.LayerCollection.#ctor">
            <summary>
                Initializes this object.
            </summary>
        </member>
        <member name="T:Metrolib.MapView">
            <summary>
            </summary>
        </member>
        <member name="F:Metrolib.MapView.LayersProperty">
            <summary>
                Definition of the <see cref="P:Metrolib.MapView.Layers" /> dependency property.
            </summary>
        </member>
        <member name="M:Metrolib.MapView.#ctor">
            <summary>
                Initializes this map view.
            </summary>
        </member>
        <member name="P:Metrolib.MapView.Layers">
            <summary>
                The layers being displayed by this map view.
            </summary>
        </member>
        <member name="M:Metrolib.MapView.OnApplyTemplate">
            <summary>
                Called when the template's tree is generated.
            </summary>
        </member>
        <member name="T:Metrolib.AlgorithmResult">
            <summary>
                The result of a <see cref="T:Metrolib.INodeLayoutAlgorithm" /> that is eventually used to render
                the <see cref="T:Metrolib.NetworkViewNodeItem" />s.
            </summary>
        </member>
        <member name="F:Metrolib.AlgorithmResult.Empty">
            <summary>
                An empty result.
            </summary>
        </member>
        <member name="M:Metrolib.AlgorithmResult.GetEnumerator">
            <summary>
                Returns an enumerator that iterates through the collection.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Metrolib.AlgorithmResult.System#Collections#IEnumerable#GetEnumerator">
            <summary>
                Returns an enumerator that iterates through a collection.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Metrolib.AlgorithmResult.Count">
            <summary>
                Gets the number of elements in the collection.
            </summary>
        </member>
        <member name="M:Metrolib.AlgorithmResult.ContainsKey(Metrolib.INode)">
            <summary>
                Determines whether the read-only dictionary contains an element that has the specified key.
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Metrolib.AlgorithmResult.TryGetValue(Metrolib.INode,System.Windows.Point@)">
            <summary>
                Gets the value that is associated with the specified key.
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="P:Metrolib.AlgorithmResult.Item(Metrolib.INode)">
            <summary>
                Gets the element that has the specified key in the read-only dictionary.
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="P:Metrolib.AlgorithmResult.Keys">
            <summary>
                Gets an enumerable collection that contains the keys in the read-only dictionary.
            </summary>
        </member>
        <member name="P:Metrolib.AlgorithmResult.Values">
            <summary>
                Gets an enumerable collection that contains the values in the read-only dictionary.
            </summary>
        </member>
        <member name="M:Metrolib.AlgorithmResult.ToString">
            <summary>
                Returns a string that represents the current object.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Metrolib.AlgorithmResult.Create(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{Metrolib.INode,System.Windows.Point}})">
            <summary>
                Creates a new result from the given positions.
            </summary>
            <param name="values"></param>
            <returns></returns>
        </member>
        <member name="T:Metrolib.SolvingNodeLayoutAlgorithm">
            <summary>
                A cascaded <see cref="T:Metrolib.INodeLayoutAlgorithm" /> that executes the underlying
                algorithm as long as it takes until either
                - the result converges
                - a limit is reached
            </summary>
        </member>
        <member name="M:Metrolib.SolvingNodeLayoutAlgorithm.#ctor(Metrolib.INodeLayoutAlgorithm)">
            <summary>
                Creates a new solver for the given algorithm.
            </summary>
            <param name="algorithm"></param>
        </member>
        <member name="P:Metrolib.SolvingNodeLayoutAlgorithm.Result">
            <summary>
                The current result of the algorithm.
            </summary>
        </member>
        <member name="M:Metrolib.SolvingNodeLayoutAlgorithm.AddNode(Metrolib.INode)">
            <summary>
                Adds the given node to the list of nodes of the graph.
            </summary>
            <param name="node"></param>
        </member>
        <member name="M:Metrolib.SolvingNodeLayoutAlgorithm.RemoveNode(Metrolib.INode)">
            <summary>
                Removes the given node from the list of nodes of the graph.
            </summary>
            <param name="node"></param>
        </member>
        <member name="M:Metrolib.SolvingNodeLayoutAlgorithm.ClearNodes">
            <summary>
                Removes all nodes from the graph.
            </summary>
        </member>
        <member name="M:Metrolib.SolvingNodeLayoutAlgorithm.Freeze(Metrolib.INode)">
            <summary>
                Freezes the given so that its position doesn't change until the node is unfrozen (<see cref="M:Metrolib.SolvingNodeLayoutAlgorithm.Unfreeze(Metrolib.INode)" />) again.
            </summary>
            <remarks>
                Is invoked by the view when the user starts dragging nodes around.
            </remarks>
            <param name="node"></param>
        </member>
        <member name="M:Metrolib.SolvingNodeLayoutAlgorithm.Unfreeze(Metrolib.INode)">
            <summary>
                Unfreezes the given node so that its may change, if the algorithm deems it necessary, of-course.
            </summary>
            <param name="node"></param>
        </member>
        <member name="M:Metrolib.SolvingNodeLayoutAlgorithm.AddEdge(Metrolib.IEdge)">
            <summary>
                Adds the given edge to the graph.
            </summary>
            <remarks>
                Edges may point to nodes that have not been added (yet).
            </remarks>
            <param name="edge"></param>
        </member>
        <member name="M:Metrolib.SolvingNodeLayoutAlgorithm.RemoveEdge(Metrolib.IEdge)">
            <summary>
                Removes the given list of edges from the graph.
            </summary>
            <remarks>
                Edges may point to nodes that have not been added (yet).
            </remarks>
            <param name="edge"></param>
        </member>
        <member name="M:Metrolib.SolvingNodeLayoutAlgorithm.ClearEdges">
            <summary>
                Removes all edges from the graph.
            </summary>
        </member>
        <member name="M:Metrolib.SolvingNodeLayoutAlgorithm.SetPosition(Metrolib.INode,System.Windows.Point)">
            <summary>
            Overwrites the position assigned by this algorithm with the given one.
            </summary>
            <param name="node"></param>
            <param name="position"></param>
        </member>
        <member name="M:Metrolib.SolvingNodeLayoutAlgorithm.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Metrolib.SolvingNodeLayoutAlgorithm.Solve(System.Threading.CancellationToken)">
            <summary>
                Is called by a background thread to "solve" the algorithm with brute force, so to speak.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Metrolib.SolvingNodeLayoutAlgorithm.Converges(Metrolib.AlgorithmResult,Metrolib.AlgorithmResult)">
            <summary>
                Tests if the given result can be seen as converging.
            </summary>
            <param name="previous"></param>
            <param name="current"></param>
            <returns></returns>
        </member>
        <member name="T:Metrolib.INode">
            <summary>
                Represents a node in a 2-d graph.
            </summary>
        </member>
        <member name="T:Metrolib.NetworkViewNodeItem">
            <summary>
                The content control that represents one node in <see cref="P:Metrolib.NetworkView.Nodes" />.
            </summary>
        </member>
        <member name="F:Metrolib.NetworkViewNodeItem.IsSelectedProperty">
            <summary>
                Definition of the <see cref="P:Metrolib.NetworkViewNodeItem.IsSelected" /> dependency property.
            </summary>
        </member>
        <member name="P:Metrolib.NetworkViewNodeItem.IsSelected">
            <summary>
                Whether or not this item has been selected by the user.
            </summary>
        </member>
        <member name="P:Metrolib.NetworkViewNodeItem.Position">
            <summary>
                The position of this node as determined by the <see cref="T:Metrolib.INodeLayoutAlgorithm" />
            </summary>
        </member>
        <member name="P:Metrolib.NetworkViewNodeItem.DisplayPosition">
            <summary>
                The actual position of this node on the canvas.
            </summary>
            <remarks>
                May differ from <see cref="P:Metrolib.NetworkViewNodeItem.Position" /> as the <see cref="T:Metrolib.NetworkView" /> tries to correct
                for drifts in the algorithm results.
            </remarks>
        </member>
        <member name="T:Metrolib.IPieSeries">
            <summary>
            
            </summary>
        </member>
        <member name="P:Metrolib.IPieSeries.Slices">
            <summary>
            
            </summary>
        </member>
        <member name="T:Metrolib.IPieSlice">
            <summary>
                Represents a slice of a pie chart.
            </summary>
        </member>
        <member name="P:Metrolib.IPieSlice.Outline">
            <summary>
                The pen used to draw the outline of the slice, if any.
            </summary>
        </member>
        <member name="P:Metrolib.IPieSlice.Fill">
            <summary>
                The brush used to fill the area of the slice, if any.
            </summary>
        </member>
        <member name="P:Metrolib.IPieSlice.Value">
            <summary>
                The value of this slice.
            </summary>
            <remarks>
                Is used to determine the arc-length of the circle segment that represents this slice.
            </remarks>
        </member>
        <member name="P:Metrolib.IPieSlice.DisplayedValue">
            <summary>
                The value of this slice, as it shall be displayed.
            </summary>
            <remarks>
                Is placed inside the rendered circle segment.
            </remarks>
        </member>
        <member name="P:Metrolib.IPieSlice.Label">
            <summary>
                The label of this slice, if any.
            </summary>
            <remarks>
                Is placed adjacent to the rendered circle segment.
            </remarks>
        </member>
        <member name="P:Metrolib.IPieSlice.Tooltip">
            <summary>
                The tooltip of this slice, if any.
            </summary>
            <remarks>
                Is displayed when the mouse hovers over a circle segment.
            </remarks>
        </member>
        <member name="T:Metrolib.PieChart">
            <summary>
            </summary>
        </member>
        <member name="F:Metrolib.PieChart.SeriesProperty">
            <summary>
                Definition of the <see cref="P:Metrolib.PieChart.Series" /> dependency property.
            </summary>
        </member>
        <member name="F:Metrolib.PieChart.ValueTemplateProperty">
            <summary>
                Definition of the <see cref="P:Metrolib.PieChart.ValueTemplate" /> dependency property.
            </summary>
        </member>
        <member name="F:Metrolib.PieChart.LabelTemplateProperty">
            <summary>
                Definition of the <see cref="P:Metrolib.PieChart.LabelTemplate" />
            </summary>
        </member>
        <member name="F:Metrolib.PieChart.OutlineProperty">
            <summary>
                Definition of the <see cref="P:Metrolib.PieChart.Outline" /> dependency property.
            </summary>
        </member>
        <member name="F:Metrolib.PieChart.LabelMarginProperty">
            <summary>
                Definition of the <see cref="P:Metrolib.PieChart.LabelMargin" /> dependency property.
            </summary>
        </member>
        <member name="F:Metrolib.PieChart.MinimumArcLengthProperty">
            <summary>
                Definition of the <see cref="P:Metrolib.PieChart.MinimumArcLength" /> dependency property.
            </summary>
        </member>
        <member name="F:Metrolib.PieChart.SumOfSlicesProperty">
            <summary>
                Definition of the <see cref="P:Metrolib.PieChart.SumOfSlices" /> dependency property.
            </summary>
        </member>
        <member name="M:Metrolib.PieChart.#ctor">
            <summary>
                Initializes this chart.
            </summary>
        </member>
        <member name="P:Metrolib.PieChart.MinimumArcLength">
            <summary>
                The minimum length of a slice as it is displayed.
            </summary>
            <remarks>
                When set to a positive value greater 0, then slices that would otherwise not be shown (because they would occupy a miniscule amount
                of space) will be.
            </remarks>
        </member>
        <member name="P:Metrolib.PieChart.ValueTemplate">
            <summary>
                The data template, if any, used to present a <see cref="P:Metrolib.IPieSlice.DisplayedValue" />.
            </summary>
        </member>
        <member name="P:Metrolib.PieChart.LabelTemplate">
            <summary>
                The data template, if any, used to present a <see cref="P:Metrolib.IPieSlice.Label" />.
            </summary>
        </member>
        <member name="P:Metrolib.PieChart.LabelMargin">
            <summary>
                The margin between the pie chart's outline and the label that is placed next to each slice.
            </summary>
        </member>
        <member name="P:Metrolib.PieChart.Outline">
            <summary>
                The outline used to draw *around* the entire bar chart.
            </summary>
        </member>
        <member name="P:Metrolib.PieChart.SumOfSlices">
            <summary>
                The sum of the individual values of all slices.
            </summary>
        </member>
        <member name="P:Metrolib.PieChart.Series">
            <summary>
                The series displayed by this chart.
            </summary>
        </member>
        <member name="M:Metrolib.PieChart.ArrangeOverride(System.Windows.Size)">
            <summary>
                Arranges the content of a System.Windows.Controls.Canvas element.
            </summary>
            <param name="arrangeSize"></param>
            <returns></returns>
        </member>
        <member name="M:Metrolib.PieChart.FindValuePosition(Metrolib.Geometry.CircleSegment,System.Windows.Size)">
            <summary>
                Tries to find an optimal position for the <see cref="P:Metrolib.IPieSlice.DisplayedValue" />
                that is rendered inside a slice.
            </summary>
            <param name="shape"></param>
            <param name="size"></param>
            <returns></returns>
        </member>
        <member name="T:Metrolib.PieChartSliceItem">
            <summary>
                Responsible for drawing the actual slice that represents a <see cref="T:Metrolib.IPieSlice" />.
            </summary>
        </member>
        <member name="F:Metrolib.PieChartSliceItem.StartAngleProperty">
            <summary>
                Definition of the <see cref="P:Metrolib.PieChartSliceItem.StartAngle" /> dependency property.
            </summary>
        </member>
        <member name="F:Metrolib.PieChartSliceItem.CenterProperty">
            <summary>
                Definition of the <see cref="P:Metrolib.PieChartSliceItem.Center" /> dependency property.
            </summary>
        </member>
        <member name="F:Metrolib.PieChartSliceItem.AngleProperty">
            <summary>
                Definition of the <see cref="P:Metrolib.PieChartSliceItem.Angle" /> dependency property.
            </summary>
        </member>
        <member name="F:Metrolib.PieChartSliceItem.DirectionProperty">
            <summary>
                Definition of the <see cref="P:Metrolib.PieChartSliceItem.Direction" /> dependency property.
            </summary>
        </member>
        <member name="F:Metrolib.PieChartSliceItem.OpenAngleProperty">
            <summary>
                Definition of the <see cref="P:Metrolib.PieChartSliceItem.OpenAngle" /> dependency property.
            </summary>
        </member>
        <member name="F:Metrolib.PieChartSliceItem.SliceProperty">
            <summary>
                Definition of the <see cref="P:Metrolib.PieChartSliceItem.Slice" /> dependency property.
            </summary>
        </member>
        <member name="F:Metrolib.PieChartSliceItem.RadiusProperty">
            <summary>
                Definition of the <see cref="P:Metrolib.PieChartSliceItem.Radius" /> dependency property.
            </summary>
        </member>
        <member name="F:Metrolib.PieChartSliceItem.ShapeProperty">
            <summary>
                Definition of the <see cref="P:Metrolib.PieChartSliceItem.Shape" /> dependency property.
            </summary>
        </member>
        <member name="P:Metrolib.PieChartSliceItem.Center">
            <summary>
                The center of the circle.
            </summary>
        </member>
        <member name="P:Metrolib.PieChartSliceItem.Shape">
            <summary>
                The bounding shape that approximates the slice's drawn area and is used to determine the
                placement of labels.
            </summary>
        </member>
        <member name="P:Metrolib.PieChartSliceItem.Angle">
            <summary>
                The angle halfway between <see cref="P:Metrolib.PieChartSliceItem.StartAngle" /> and <see cref="P:Metrolib.PieChartSliceItem.StartAngle" />+<see cref="P:Metrolib.PieChartSliceItem.OpenAngle" />.
            </summary>
        </member>
        <member name="P:Metrolib.PieChartSliceItem.Direction">
            <summary>
                The direction the slice is pointing at, from the center of the pie chart.
            </summary>
        </member>
        <member name="P:Metrolib.PieChartSliceItem.Radius">
            <summary>
                The radius of this slice.
            </summary>
        </member>
        <member name="P:Metrolib.PieChartSliceItem.Slice">
            <summary>
                The slice being drawn.
            </summary>
        </member>
        <member name="P:Metrolib.PieChartSliceItem.OpenAngle">
            <summary>
                The opening angle in radians of the circle segment.
            </summary>
        </member>
        <member name="P:Metrolib.PieChartSliceItem.StartAngle">
            <summary>
                The start angle in radians of the circle segment with 0 being the bottom.
            </summary>
        </member>
        <member name="M:Metrolib.PieChartSliceItem.OnRender(System.Windows.Media.DrawingContext)">
            <summary>
                Draws this slice of a pie chart.
            </summary>
            <param name="drawingContext"></param>
        </member>
        <member name="T:Metrolib.PieChartLabelItem">
            <summary>
                Responsible for presenting the <see cref="P:Metrolib.IPieSlice.Label" /> property.
            </summary>
        </member>
        <member name="T:Metrolib.PieChartValueItem">
            <summary>
                Responsible for presenting the <see cref="P:Metrolib.IPieSlice.DisplayedValue" /> inside
                the circle segment allocated to that slice.
            </summary>
        </member>
        <member name="T:Metrolib.PieSeries">
            <summary>
            </summary>
        </member>
        <member name="M:Metrolib.PieSeries.#ctor">
            <summary>
            Initializes this series.
            </summary>
        </member>
        <member name="E:Metrolib.PieSeries.PropertyChanged">
            <summary>
            Occurs when a property value changes.
            </summary>
        </member>
        <member name="P:Metrolib.PieSeries.Slices">
            <summary>
            
            </summary>
        </member>
        <member name="T:Metrolib.PieSlice">
            <summary>
                The default implementation of a <see cref="T:Metrolib.IPieSlice" />.
            </summary>
        </member>
        <member name="M:Metrolib.PieSlice.#ctor">
            <summary>
                Initializes this slice.
            </summary>
        </member>
        <member name="E:Metrolib.PieSlice.PropertyChanged">
            <summary>
            Occurs when a property value changes.
            </summary>
        </member>
        <member name="P:Metrolib.PieSlice.Outline">
            <summary>
                The pen used to draw the outline of the slice, if any.
            </summary>
        </member>
        <member name="P:Metrolib.PieSlice.Fill">
            <summary>
            The brush used to fill the area of the slice, if any.
            </summary>
        </member>
        <member name="P:Metrolib.PieSlice.Value">
            <summary>
                The value of this slice.
            </summary>
        </member>
        <member name="P:Metrolib.PieSlice.DisplayedValue">
            <summary>
                The value of this slice, as it shall be displayed.
            </summary>
        </member>
        <member name="P:Metrolib.PieSlice.Label">
            <summary>
                The title of this slice, if any.
            </summary>
        </member>
        <member name="P:Metrolib.PieSlice.Tooltip">
            <summary>
                The tooltip of this slice, if any.
            </summary>
        </member>
        <member name="M:Metrolib.PieSlice.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Metrolib.SliceDirection">
            <summary>
                Describes the direction a <see cref="T:Metrolib.PieChartSliceItem" /> is pointing at.
            </summary>
        </member>
        <member name="F:Metrolib.SliceDirection.TopRight">
            <summary>
                The slice is facing in the top right corner of the chart.
            </summary>
        </member>
        <member name="F:Metrolib.SliceDirection.BottomRight">
            <summary>
                The slice is facing in the bottom right corner of the chart.
            </summary>
        </member>
        <member name="F:Metrolib.SliceDirection.BottomLeft">
            <summary>
                The slice is facing in the bottom left corner of the chart.
            </summary>
        </member>
        <member name="F:Metrolib.SliceDirection.TopLeft">
            <summary>
                The slice is facing in the top left corner of the chart.
            </summary>
        </member>
        <member name="T:Metrolib.CircularProgressBar">
            <summary>
                A circular progress bar (full circle).
            </summary>
        </member>
        <member name="F:Metrolib.CircularProgressBar.ThicknessProperty">
            <summary>
                Definition of the <see cref="P:Metrolib.CircularProgressBar.Thickness" /> dependency property.
            </summary>
        </member>
        <member name="F:Metrolib.CircularProgressBar.ContentProperty">
            <summary>
                Definition of the <see cref="P:Metrolib.CircularProgressBar.Content" /> dependency property.
            </summary>
        </member>
        <member name="F:Metrolib.CircularProgressBar.ContentTemplateProperty">
            <summary>
                Definition of the <see cref="P:Metrolib.CircularProgressBar.ContentTemplate" /> dependency property.
            </summary>
        </member>
        <member name="F:Metrolib.CircularProgressBar.IndeterminateAngleProperty">
            <summary>
                Definition of the <see cref="P:Metrolib.CircularProgressBar.IndeterminateAngle" /> dependency property.
            </summary>
        </member>
        <member name="M:Metrolib.CircularProgressBar.#ctor">
            <summary>
                Initializes this object.
            </summary>
        </member>
        <member name="P:Metrolib.CircularProgressBar.IndeterminateAngle">
            <summary>
                The current angle of of the circle segment when this progress bar is indeterminate.
            </summary>
        </member>
        <member name="P:Metrolib.CircularProgressBar.ContentTemplate">
            <summary>
                The data template, if any, that is used to present the <see cref="P:Metrolib.CircularProgressBar.Content" />.
            </summary>
        </member>
        <member name="P:Metrolib.CircularProgressBar.Content">
            <summary>
                The content being displayed in the center of the circular progress bar.
            </summary>
        </member>
        <member name="P:Metrolib.CircularProgressBar.Thickness">
            <summary>
                The thickness of the circular progress bar.
            </summary>
        </member>
        <member name="M:Metrolib.CircularProgressBar.OnApplyTemplate">
            <summary>
                Called when the template's tree is generated.
            </summary>
        </member>
        <member name="T:Metrolib.Geometry.Angle">
            <summary>
                Helper class to help deal with angle from/to radian conversions.
            </summary>
        </member>
        <member name="M:Metrolib.Geometry.Angle.ToRadians(System.Double)">
            <summary>
                Converts an angle in degrees to radians.
            </summary>
            <param name="degrees"></param>
            <returns></returns>
        </member>
        <member name="M:Metrolib.Geometry.Angle.ToDegrees(System.Double)">
            <summary>
                Converts an angle in radians to degrees.
            </summary>
            <param name="radians"></param>
            <returns></returns>
        </member>
        <member name="T:Metrolib.Geometry.Circle">
            <summary>
                A 2-d circle.
            </summary>
        </member>
        <member name="F:Metrolib.Geometry.Circle.Center">
            <summary>
                The center position of the circle.
            </summary>
        </member>
        <member name="F:Metrolib.Geometry.Circle.Radius">
            <summary>
                The radius of the circle.
            </summary>
        </member>
        <member name="P:Metrolib.Geometry.Circle.Circumference">
            <summary>
                The circumference of the circle.
            </summary>
        </member>
        <member name="M:Metrolib.Geometry.Circle.Equals(Metrolib.Geometry.Circle)">
            <summary>
                Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:Metrolib.Geometry.Circle.Equals(System.Object)">
            <summary>
                Indicates whether this instance and a specified object are equal.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Metrolib.Geometry.Circle.GetHashCode">
            <summary>
                Returns the hash code for this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Metrolib.Geometry.Circle.op_Equality(Metrolib.Geometry.Circle,Metrolib.Geometry.Circle)">
            <summary>
                Tests the two given circles for equality.
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:Metrolib.Geometry.Circle.op_Inequality(Metrolib.Geometry.Circle,Metrolib.Geometry.Circle)">
            <summary>
                Tests the two given circles for inequality.
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:Metrolib.Geometry.Circle.GetPoint(System.Double)">
            <summary>
                Calculates a point on this circle with the given angle in radians, clock-wise,
                with 0 being (-1, 0).
            </summary>
            <param name="angle"></param>
            <returns></returns>
        </member>
        <member name="M:Metrolib.Geometry.Circle.ToString">
            <summary>
                Returns a string that represents the current object.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Metrolib.Geometry.CircleSegment">
            <summary>
                A segment of a circle.
            </summary>
        </member>
        <member name="F:Metrolib.Geometry.CircleSegment.Circle">
            <summary>
                The circle of which this segment represents a part of.
            </summary>
        </member>
        <member name="F:Metrolib.Geometry.CircleSegment.EndAngle">
            <summary>
            </summary>
        </member>
        <member name="F:Metrolib.Geometry.CircleSegment.StartAngle">
            <summary>
            </summary>
        </member>
        <member name="P:Metrolib.Geometry.CircleSegment.StartPoint">
            <summary>
                The point at <see cref="F:Metrolib.Geometry.CircleSegment.StartAngle" /> on the circle.
            </summary>
        </member>
        <member name="P:Metrolib.Geometry.CircleSegment.EndPoint">
            <summary>
                The point at <see cref="F:Metrolib.Geometry.CircleSegment.EndAngle" /> on the circle.
            </summary>
        </member>
        <member name="P:Metrolib.Geometry.CircleSegment.OpenAngle">
            <summary>
                The arc length of the circle segment.
            </summary>
        </member>
        <member name="P:Metrolib.Geometry.CircleSegment.Angle">
            <summary>
                The angle halfway between <see cref="F:Metrolib.Geometry.CircleSegment.StartAngle" /> and <see cref="F:Metrolib.Geometry.CircleSegment.EndAngle" />.
            </summary>
        </member>
        <member name="M:Metrolib.Geometry.CircleSegment.ToString">
            <summary>
                Returns a string that represents the current object.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Metrolib.Geometry.CircleSegment.Contains(System.Windows.Point)">
            <summary>
                Tests if the given point is inside this circle segment, or outside.
            </summary>
            <param name="that"></param>
            <returns></returns>
        </member>
        <member name="M:Metrolib.Geometry.CircleSegment.Contains(System.Windows.Rect)">
            <summary>
                Tests if the given rectangle fully fits inside this circle segment.
            </summary>
            <param name="that"></param>
            <returns></returns>
        </member>
        <member name="T:Metrolib.Geometry.Triangle">
            <summary>
                A 2-d triangle.
            </summary>
        </member>
        <member name="F:Metrolib.Geometry.Triangle.P0">
            <summary>
                First point of the triangle.
            </summary>
        </member>
        <member name="F:Metrolib.Geometry.Triangle.P1">
            <summary>
                Second point of the triangle.
            </summary>
        </member>
        <member name="F:Metrolib.Geometry.Triangle.P2">
            <summary>
                Third point of the triangle.
            </summary>
        </member>
        <member name="M:Metrolib.Geometry.Triangle.#ctor(System.Windows.Point,System.Windows.Point,System.Windows.Point)">
            <summary>
                Initializes this triangle.
            </summary>
            <param name="p0"></param>
            <param name="p1"></param>
            <param name="p2"></param>
        </member>
        <member name="M:Metrolib.Geometry.Triangle.Equals(Metrolib.Geometry.Triangle)">
            <summary>
                Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:Metrolib.Geometry.Triangle.Sign(System.Windows.Point,System.Windows.Point,System.Windows.Point)">
            <summary>
                Determines the side of a half plane (determined by <paramref name="p1" /> and <paramref name="p2" />)
                a given point (<paramref name="p0" />) lies.
            </summary>
            <param name="p0"></param>
            <param name="p1"></param>
            <param name="p2"></param>
            <returns></returns>
        </member>
        <member name="M:Metrolib.Geometry.Triangle.Contains(System.Windows.Point)">
            <summary>
                Tests if this triangle contains the given point, or not.
            </summary>
            <param name="that"></param>
            <returns></returns>
        </member>
        <member name="M:Metrolib.Geometry.Triangle.Contains(System.Windows.Rect)">
            <summary>
                Tests if this triangle fully contains the given rectangle, or not.
            </summary>
            <param name="that"></param>
            <returns></returns>
        </member>
        <member name="M:Metrolib.Geometry.Triangle.Equals(System.Object)">
            <summary>
                Indicates whether this instance and a specified object are equal.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Metrolib.Geometry.Triangle.GetHashCode">
            <summary>
                Returns the hash code for this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Metrolib.Geometry.Triangle.ToString">
            <summary>
                Returns a string that represents the current object.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Metrolib.Geometry.Triangle.op_Equality(Metrolib.Geometry.Triangle,Metrolib.Geometry.Triangle)">
            <summary>
                Tests the two given triangles for equality.
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:Metrolib.Geometry.Triangle.op_Inequality(Metrolib.Geometry.Triangle,Metrolib.Geometry.Triangle)">
            <summary>
                Tests the two given triangles for inequality.
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="T:Metrolib.MapCanvas">
            <summary>
                The canvas that actually presents all layers of a <see cref="T:Metrolib.MapView" />.
            </summary>
        </member>
        <member name="M:Metrolib.MapCanvas.AddLayers(System.Int32,System.Collections.Generic.IEnumerable{Metrolib.Layer})">
            <summary>
                Adds the given layers to this canvas.
            </summary>
            <param name="newStartingIndex"></param>
            <param name="newItems"></param>
        </member>
        <member name="T:Metrolib.Icons">
            <summary>
            
            </summary>
        </member>
        <member name="F:Metrolib.Icons.Apps">
            <summary>
            
            </summary>
        </member>
        <member name="F:Metrolib.Icons.Pen">
            <summary>
            
            </summary>
        </member>
        <member name="F:Metrolib.Icons.Email">
            <summary>
            
            </summary>
        </member>
        <member name="F:Metrolib.Icons.EmailOpen">
            <summary>
            
            </summary>
        </member>
        <member name="F:Metrolib.Icons.ChevronDown">
            <summary>
            
            </summary>
        </member>
        <member name="F:Metrolib.Icons.ChevronUp">
            <summary>
            
            </summary>
        </member>
        <member name="F:Metrolib.Icons.ViewDashboard">
            <summary>
            
            </summary>
        </member>
        <member name="F:Metrolib.Icons.ViewQuilt">
            <summary>
            
            </summary>
        </member>
        <member name="F:Metrolib.Icons.ViewGrid">
            <summary>
            
            </summary>
        </member>
        <member name="F:Metrolib.Icons.ViewList">
            <summary>
            
            </summary>
        </member>
        <member name="F:Metrolib.Icons.ViewHeadline">
            <summary>
            
            </summary>
        </member>
        <member name="F:Metrolib.Icons.ViewModule">
            <summary>
            
            </summary>
        </member>
        <member name="F:Metrolib.Icons.ViewColumn">
            <summary>
            
            </summary>
        </member>
        <member name="F:Metrolib.Icons.ViewSequential">
            <summary>
            
            </summary>
        </member>
        <member name="F:Metrolib.Icons.ViewDay">
            <summary>
            
            </summary>
        </member>
        <member name="F:Metrolib.Icons.ViewWeek">
            <summary>
            
            </summary>
        </member>
        <member name="F:Metrolib.Icons.Widgets">
            <summary>
            
            </summary>
        </member>
        <member name="F:Metrolib.Icons.Bookmark">
            <summary>
            
            </summary>
        </member>
        <member name="F:Metrolib.Icons.BookmarkCheck">
            <summary>
            
            </summary>
        </member>
        <member name="F:Metrolib.Icons.BookmarkOutline">
            <summary>
            
            </summary>
        </member>
        <member name="F:Metrolib.Icons.BookmarkPlus">
            <summary>
            
            </summary>
        </member>
        <member name="F:Metrolib.Icons.BookmarkPlusOutline">
            <summary>
            
            </summary>
        </member>
        <member name="F:Metrolib.Icons.BookmarkRemove">
            <summary>
            
            </summary>
        </member>
        <member name="F:Metrolib.Icons.Eye">
            <summary>
            
            </summary>
        </member>
        <member name="F:Metrolib.Icons.EyeOff">
            <summary>
            
            </summary>
        </member>
        <member name="F:Metrolib.Icons.Add">
            <summary>
            
            </summary>
        </member>
        <member name="F:Metrolib.Icons.Delete">
            <summary>
            
            </summary>
        </member>
        <member name="F:Metrolib.Icons.WindowMinimize">
            <summary>
            
            </summary>
        </member>
        <member name="F:Metrolib.Icons.WindowMaximize">
            <summary>
            
            </summary>
        </member>
        <member name="F:Metrolib.Icons.WindowRestore">
            <summary>
            
            </summary>
        </member>
        <member name="F:Metrolib.Icons.DotsVertical">
            <summary>
            
            </summary>
        </member>
        <member name="F:Metrolib.Icons.Refresh">
            <summary>
            
            </summary>
        </member>
        <member name="F:Metrolib.Icons.Remove">
            <summary>
            
            </summary>
        </member>
        <member name="F:Metrolib.Icons.Magnify">
            <summary>
            
            </summary>
        </member>
        <member name="F:Metrolib.Icons.Undo">
            <summary>
            
            </summary>
        </member>
        <member name="F:Metrolib.Icons.Filter">
            <summary>
            
            </summary>
        </member>
        <member name="F:Metrolib.Icons.FilterOutline">
            <summary>
            
            </summary>
        </member>
        <member name="F:Metrolib.Icons.FilterRemove">
            <summary>
            
            </summary>
        </member>
        <member name="F:Metrolib.Icons.FilterRemoveOutline">
            <summary>
            
            </summary>
        </member>
        <member name="F:Metrolib.Icons.ContentSave">
            <summary>
            
            </summary>
        </member>
        <member name="F:Metrolib.Icons.ContentSaveAll">
            <summary>
            
            </summary>
        </member>
        <member name="F:Metrolib.Icons.ContentSaveSettings">
            <summary>
            
            </summary>
        </member>
        <member name="F:Metrolib.Icons.File">
            <summary>
            
            </summary>
        </member>
        <member name="F:Metrolib.Icons.FileAccount">
            <summary>
            
            </summary>
        </member>
        <member name="F:Metrolib.Icons.FileChart">
            <summary>
            
            </summary>
        </member>
        <member name="F:Metrolib.Icons.FileCheck">
            <summary>
            
            </summary>
        </member>
        <member name="F:Metrolib.Icons.FileCloud">
            <summary>
            
            </summary>
        </member>
        <member name="F:Metrolib.Icons.FileDelimited">
            <summary>
            
            </summary>
        </member>
        <member name="F:Metrolib.Icons.FileDocument">
            <summary>
            
            </summary>
        </member>
        <member name="F:Metrolib.Icons.FileDocumentBox">
            <summary>
            
            </summary>
        </member>
        <member name="F:Metrolib.Icons.FileExcel">
            <summary>
            
            </summary>
        </member>
        <member name="F:Metrolib.Icons.FileExcelBox">
            <summary>
            
            </summary>
        </member>
        <member name="F:Metrolib.Icons.FileFind">
            <summary>
            
            </summary>
        </member>
        <member name="F:Metrolib.Icons.FileHidden">
            <summary>
            
            </summary>
        </member>
        <member name="F:Metrolib.Icons.FileImage">
            <summary>
            
            </summary>
        </member>
        <member name="F:Metrolib.Icons.FileImport">
            <summary>
            
            </summary>
        </member>
        <member name="F:Metrolib.Icons.FileLock">
            <summary>
            
            </summary>
        </member>
        <member name="F:Metrolib.Icons.FileMultiple">
            <summary>
            
            </summary>
        </member>
        <member name="F:Metrolib.Icons.FileMusic">
            <summary>
            
            </summary>
        </member>
        <member name="F:Metrolib.Icons.FileOutline">
            <summary>
            
            </summary>
        </member>
        <member name="F:Metrolib.Icons.FilePdf">
            <summary>
            
            </summary>
        </member>
        <member name="F:Metrolib.Icons.FilePercent">
            <summary>
            
            </summary>
        </member>
        <member name="F:Metrolib.Icons.FilePlus">
            <summary>
            
            </summary>
        </member>
        <member name="F:Metrolib.Icons.FilePowerPoint">
            <summary>
            
            </summary>
        </member>
        <member name="F:Metrolib.Icons.FilePowerPointBox">
            <summary>
            
            </summary>
        </member>
        <member name="F:Metrolib.Icons.FilePresentationBox">
            <summary>
            
            </summary>
        </member>
        <member name="F:Metrolib.Icons.FileRestore">
            <summary>
            
            </summary>
        </member>
        <member name="F:Metrolib.Icons.FileSend">
            <summary>
            
            </summary>
        </member>
        <member name="F:Metrolib.Icons.FileTree">
            <summary>
            
            </summary>
        </member>
        <member name="F:Metrolib.Icons.FileVideo">
            <summary>
            
            </summary>
        </member>
        <member name="F:Metrolib.Icons.FileWord">
            <summary>
            
            </summary>
        </member>
        <member name="F:Metrolib.Icons.FileWordBox">
            <summary>
            
            </summary>
        </member>
        <member name="F:Metrolib.Icons.FileXml">
            <summary>
            
            </summary>
        </member>
        <member name="F:Metrolib.Icons.FileExport">
            <summary>
            
            </summary>
        </member>
        <member name="F:Metrolib.Icons.Folder">
            <summary>
            
            </summary>
        </member>
        <member name="F:Metrolib.Icons.FolderAccount">
            <summary>
            
            </summary>
        </member>
        <member name="F:Metrolib.Icons.FolderDownload">
            <summary>
            
            </summary>
        </member>
        <member name="F:Metrolib.Icons.FolderPlus">
            <summary>
            
            </summary>
        </member>
        <member name="F:Metrolib.Icons.FolderOpen">
            <summary>
            
            </summary>
        </member>
        <member name="F:Metrolib.Icons.FolderRemove">
            <summary>
            
            </summary>
        </member>
        <member name="F:Metrolib.Icons.FolderStar">
            <summary>
            
            </summary>
        </member>
        <member name="F:Metrolib.Icons.FolderUpload">
            <summary>
            
            </summary>
        </member>
        <member name="F:Metrolib.Icons.Settings">
            <summary>
            
            </summary>
        </member>
        <member name="F:Metrolib.Icons.Information">
            <summary>
            
            </summary>
        </member>
        <member name="F:Metrolib.Icons.InformationOutline">
            <summary>
            
            </summary>
        </member>
        <member name="F:Metrolib.Icons.Puzzle">
            <summary>
            
            </summary>
        </member>
        <member name="F:Metrolib.Icons.Camera">
            <summary>
            
            </summary>
        </member>
        <member name="F:Metrolib.Icons.CameraBurst">
            <summary>
            
            </summary>
        </member>
        <member name="F:Metrolib.Icons.CameraEnhance">
            <summary>
            
            </summary>
        </member>
        <member name="F:Metrolib.Icons.CameraGoPro">
            <summary>
            
            </summary>
        </member>
        <member name="F:Metrolib.Icons.CameraIris">
            <summary>
            
            </summary>
        </member>
        <member name="F:Metrolib.Icons.CameraMeteringCenter">
            <summary>
            
            </summary>
        </member>
        <member name="F:Metrolib.Icons.CameraMeteringMatrix">
            <summary>
            
            </summary>
        </member>
        <member name="F:Metrolib.Icons.CameraMeteringPartial">
            <summary>
            
            </summary>
        </member>
        <member name="F:Metrolib.Icons.CameraMeteringSpot">
            <summary>
            
            </summary>
        </member>
        <member name="F:Metrolib.Icons.CameraOff">
            <summary>
            
            </summary>
        </member>
        <member name="F:Metrolib.Icons.CameraPartyMode">
            <summary>
            
            </summary>
        </member>
        <member name="F:Metrolib.Icons.CameraRear">
            <summary>
            
            </summary>
        </member>
        <member name="F:Metrolib.Icons.CameraRearVariant">
            <summary>
            
            </summary>
        </member>
        <member name="F:Metrolib.Icons.CameraSwitch">
            <summary>
            
            </summary>
        </member>
        <member name="F:Metrolib.Icons.CameraTimer">
            <summary>
            
            </summary>
        </member>
        <member name="F:Metrolib.Icons.ChartAreaSpline">
            <summary>
            
            </summary>
        </member>
        <member name="F:Metrolib.Icons.ChartBar">
            <summary>
            
            </summary>
        </member>
        <member name="F:Metrolib.Icons.ChartBarStacked">
            <summary>
            
            </summary>
        </member>
        <member name="F:Metrolib.Icons.ChartGantt">
            <summary>
            
            </summary>
        </member>
        <member name="F:Metrolib.Icons.ChartHistogram">
            <summary>
            
            </summary>
        </member>
        <member name="F:Metrolib.Icons.ChartLine">
            <summary>
            
            </summary>
        </member>
        <member name="F:Metrolib.Icons.ChartLineStacked">
            <summary>
            
            </summary>
        </member>
        <member name="F:Metrolib.Icons.ChartPie">
            <summary>
            
            </summary>
        </member>
        <member name="F:Metrolib.Icons.ChartScatterplotHexabin">
            <summary>
            
            </summary>
        </member>
        <member name="F:Metrolib.Icons.ChartTimeline">
            <summary>
            
            </summary>
        </member>
        <member name="F:Metrolib.Icons.ChartArc">
            <summary>
            
            </summary>
        </member>
        <member name="F:Metrolib.Icons.ChartBubble">
            <summary>
            
            </summary>
        </member>
        <member name="F:Metrolib.Icons.ChartDonut">
            <summary>
            
            </summary>
        </member>
        <member name="F:Metrolib.Icons.ChartDonutVariant">
            <summary>
            
            </summary>
        </member>
        <member name="F:Metrolib.Icons.Play">
            <summary>
            
            </summary>
        </member>
        <member name="F:Metrolib.Icons.PlayBoxOutline">
            <summary>
            
            </summary>
        </member>
        <member name="F:Metrolib.Icons.PlayCircle">
            <summary>
            
            </summary>
        </member>
        <member name="F:Metrolib.Icons.PlayCircleOutline">
            <summary>
            
            </summary>
        </member>
        <member name="F:Metrolib.Icons.PlayPause">
            <summary>
            
            </summary>
        </member>
        <member name="F:Metrolib.Icons.Pause">
            <summary>
            
            </summary>
        </member>
        <member name="F:Metrolib.Icons.PauseCircle">
            <summary>
            
            </summary>
        </member>
        <member name="F:Metrolib.Icons.PauseCircleOutline">
            <summary>
            
            </summary>
        </member>
        <member name="F:Metrolib.Icons.PauseOctagon">
            <summary>
            
            </summary>
        </member>
        <member name="F:Metrolib.Icons.PauseOctagonOutline">
            <summary>
            
            </summary>
        </member>
        <member name="F:Metrolib.Icons.StepBackward">
            <summary>
            
            </summary>
        </member>
        <member name="F:Metrolib.Icons.StepBackward2">
            <summary>
            
            </summary>
        </member>
        <member name="F:Metrolib.Icons.StepForward">
            <summary>
            
            </summary>
        </member>
        <member name="F:Metrolib.Icons.StepForward2">
            <summary>
            
            </summary>
        </member>
        <member name="F:Metrolib.Icons.Stop">
            <summary>
            
            </summary>
        </member>
        <member name="F:Metrolib.Icons.StopCircle">
            <summary>
            
            </summary>
        </member>
        <member name="F:Metrolib.Icons.StopCircleOutline">
            <summary>
            
            </summary>
        </member>
        <member name="F:Metrolib.Icons.Rewind">
            <summary>
            
            </summary>
        </member>
        <member name="F:Metrolib.Icons.RewindOutline">
            <summary>
            
            </summary>
        </member>
        <member name="F:Metrolib.Icons.FastForward">
            <summary>
            
            </summary>
        </member>
        <member name="F:Metrolib.Icons.FastForwardOutline">
            <summary>
            
            </summary>
        </member>
        <member name="F:Metrolib.Icons.SkipForward">
            <summary>
            
            </summary>
        </member>
        <member name="F:Metrolib.Icons.SkipBackward">
            <summary>
            
            </summary>
        </member>
        <member name="F:Metrolib.Icons.SkipPrevious">
            <summary>
            
            </summary>
        </member>
        <member name="F:Metrolib.Icons.SkipNext">
            <summary>
            
            </summary>
        </member>
        <member name="F:Metrolib.Icons.SkipNextCircle">
            <summary>
            
            </summary>
        </member>
        <member name="F:Metrolib.Icons.SkipNextCircleOutline">
            <summary>
            
            </summary>
        </member>
        <member name="F:Metrolib.Icons.SkipPreviousCircle">
            <summary>
            
            </summary>
        </member>
        <member name="F:Metrolib.Icons.SkipPreviousCircleOutline">
            <summary>
            
            </summary>
        </member>
        <member name="F:Metrolib.Icons.Database">
            <summary>
            
            </summary>
        </member>
        <member name="F:Metrolib.Icons.DatabaseMinus">
            <summary>
            
            </summary>
        </member>
        <member name="F:Metrolib.Icons.DatabasePlus">
            <summary>
            
            </summary>
        </member>
        <member name="T:Metrolib.Physics.Attractor">
            <summary>
                Responsible for calculating and applying the force two bodies enacts upon each other.
            </summary>
            <remarks>
                A positive force value causes bodies to attract one another, a negative one
                causes the opposite.
            </remarks>
        </member>
        <member name="F:Metrolib.Physics.Attractor.Force">
            <summary>
                The force this attractor enacts upon any body.
            </summary>
        </member>
        <member name="M:Metrolib.Physics.Attractor.#ctor(System.Double)">
            <summary>
                Initializes this attractor.
            </summary>
            <param name="force"></param>
        </member>
        <member name="M:Metrolib.Physics.Attractor.ApplyForces(Metrolib.Physics.Body,Metrolib.Physics.Body)">
            <summary>
                Calculates and applies the forces the two given bodies enact upon each
                other, if they were to attrach each other <see cref="F:Metrolib.Physics.Attractor.Force" />.
            </summary>
            <param name="b0"></param>
            <param name="b1"></param>
        </member>
        <member name="T:Metrolib.Physics.Body">
            <summary>
                Represents a body with all mass located in a single point.
            </summary>
        </member>
        <member name="F:Metrolib.Physics.Body.Force">
            <summary>
                The force being applied to this body in this timestep.
            </summary>
        </member>
        <member name="F:Metrolib.Physics.Body.Mass">
            <summary>
                The mass of this body.
            </summary>
        </member>
        <member name="F:Metrolib.Physics.Body.Position">
            <summary>
                The position of this body.
            </summary>
        </member>
        <member name="F:Metrolib.Physics.Body.Velocity">
            <summary>
                The current velocity of this body.
            </summary>
        </member>
        <member name="M:Metrolib.Physics.Body.#ctor">
            <summary>
                Initializes this body with a mass of 1.
            </summary>
        </member>
        <member name="M:Metrolib.Physics.Body.ToString">
            <summary>
                Returns a string that represents the current object.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Metrolib.Physics.EulerIntegrator">
            <summary>
                The simplest of 'em all.
            </summary>
        </member>
        <member name="M:Metrolib.Physics.EulerIntegrator.#ctor(System.Double,System.Double,System.Double)">
            <summary>
                Initializes this integrator.
            </summary>
            <remarks>
                Both forces and velocities of all bodies are continously decreased so the simulation stays at rest eventually.
            </remarks>
            <param name="velocityDampening"></param>
            <param name="forceDampening"></param>
            <param name="maxForce"></param>
        </member>
        <member name="M:Metrolib.Physics.EulerIntegrator.Update(System.Collections.Generic.IEnumerable{Metrolib.Physics.Body},System.Double)">
            <summary>
                Updates the given bodies by the given amount of time.
            </summary>
            <param name="bodies"></param>
            <param name="dt"></param>
        </member>
        <member name="M:Metrolib.Physics.EulerIntegrator.Update(Metrolib.Physics.Body,System.Double)">
            <summary>
                Updates the given body by the given amount of time.
            </summary>
            <param name="body"></param>
            <param name="dt"></param>
        </member>
        <member name="T:Metrolib.Physics.Spring">
            <summary>
                Responsible for calculating the force a spring enacts upon its two end-points.
                <see cref="M:Metrolib.Physics.Spring.GetForce(System.Windows.Point,System.Windows.Point,System.Windows.Vector)" />.
            </summary>
        </member>
        <member name="F:Metrolib.Physics.Spring.Dampening">
            <summary>
                The dampening of the spring.
                Greater values mean greater dampening.
            </summary>
        </member>
        <member name="F:Metrolib.Physics.Spring.Length">
            <summary>
                The rest-length of the spring.
            </summary>
        </member>
        <member name="F:Metrolib.Physics.Spring.Stiffness">
            <summary>
                The stiffness of the spring (spring constant).
            </summary>
        </member>
        <member name="M:Metrolib.Physics.Spring.#ctor(System.Random)">
            <summary>
                Initializes this spring with the default values of 1.
            </summary>
        </member>
        <member name="M:Metrolib.Physics.Spring.#ctor(System.Random,System.Double,System.Double,System.Double)">
            <summary>
                Initializes this spring with the given values.
            </summary>
            <param name="rng">Rng that is used to calculate the direction of force in case both end-points are coincident</param>
            <param name="stiffness"></param>
            <param name="length"></param>
            <param name="dampening"></param>
        </member>
        <member name="M:Metrolib.Physics.Spring.GetForce(System.Windows.Point,System.Windows.Point,System.Windows.Vector)">
            <summary>
                Calculates the force that is enacted upon <paramref name="p0" /> and <paramref name="p1" /> (multiply the result by -1 for the latter).
            </summary>
            <param name="p0"></param>
            <param name="p1"></param>
            <param name="velocity"></param>
            <returns></returns>
        </member>
        <member name="M:Metrolib.Physics.Spring.ApplyForces(Metrolib.Physics.Body,Metrolib.Physics.Body)">
            <summary>
                Calculates and applies the forces enacted upon the two given bodies, if this spring were attached to both of them.
            </summary>
            <param name="b0"></param>
            <param name="b1"></param>
            <returns></returns>
        </member>
        <member name="T:Metrolib.EdgeDirection">
            <summary>
                The direction of an edge.
            </summary>
        </member>
        <member name="F:Metrolib.EdgeDirection.Undirected">
            <summary>
                The edge is not directed, i.e. is drawn without an arrow.
            </summary>
        </member>
        <member name="F:Metrolib.EdgeDirection.Node1ToNode2">
            <summary>
                The edge is directed and points from <see cref="P:Metrolib.IEdge.Node1" /> TO <see cref="P:Metrolib.IEdge.Node2" />.
                Visually, this is represented by an arrow.
            </summary>
        </member>
        <member name="F:Metrolib.EdgeDirection.Node2ToNode1">
            <summary>
                The edge is directed and points from <see cref="P:Metrolib.IEdge.Node2" /> TO <see cref="P:Metrolib.IEdge.Node1" />.
                Visually, this is represented by an arrow.
            </summary>
        </member>
        <member name="T:Metrolib.Edge">
            <summary>
                Untyped edge between two nodes of type <see cref="T:System.Object" /> in a graph.
            </summary>
        </member>
        <member name="P:Metrolib.Edge.Direction">
            <summary>
                The direction the edge points in, if any.
            </summary>
        </member>
        <member name="P:Metrolib.Edge.Node1">
            <summary>
                The first node of this edge.
            </summary>
        </member>
        <member name="P:Metrolib.Edge.Node2">
            <summary>
                The second node of this edge.
            </summary>
        </member>
        <member name="M:Metrolib.Edge.Create(Metrolib.INode,Metrolib.INode)">
            <summary>
                Creates a new edge between the two given nodes.
            </summary>
            <param name="node1"></param>
            <param name="node2"></param>
            <returns></returns>
        </member>
        <member name="T:Metrolib.ForceDirectedLayout">
            <summary>
                Defines the parameters for the "force directed layout" algorithm.
                Runs a physical simulation of the graph where nodes repulse each other
                and edges act as springs.
            </summary>
            <remarks>
                This layout is used by default if none other has been defined.
            </remarks>
        </member>
        <member name="M:Metrolib.ForceDirectedLayout.#ctor">
            <summary>
                Initializes this layout.
            </summary>
        </member>
        <member name="P:Metrolib.ForceDirectedLayout.Repulsiveness">
            <summary>
                The amount of repulsion that each pair of nodes enacts upon each other.
            </summary>
            <remarks>
                The greater this values, the faster nodes will move apart from each other.
            </remarks>
            <remarks>
                Should have the same magnitude (more or less) than <see cref="P:Metrolib.ForceDirectedLayout.SpringStiffness" />, otherwise
                nodes may fly apart.
            </remarks>
        </member>
        <member name="P:Metrolib.ForceDirectedLayout.SpringStiffness">
            <summary>
                The stiffness of the spring (aka spring constant) between two connected nodes.
            </summary>
            <remarks>
                The greater this value, the faster nodes will move due to being connected.
            </remarks>
        </member>
        <member name="P:Metrolib.ForceDirectedLayout.SpringDampening">
            <summary>
                The dampening of the spring.
            </summary>
            <remarks>
                The greater this value, the more two connected nodes will decrease their velocity.
            </remarks>
        </member>
        <member name="P:Metrolib.ForceDirectedLayout.Distance">
            <summary>
                The desired distance between two connected nodes.
            </summary>
            <remarks>
                This property controls the spacing of the graph: The greater its value, the
                more nodes are apart from each other, in general.
            </remarks>
            <remarks>
                This is obviously only a suggestion to the algorithm. Depending on the number of nodes
                and their connecity, nodes can end up much closer or much farther away.
            </remarks>
        </member>
        <member name="M:Metrolib.ForceDirectedLayout.CreateAlgorithm">
            <summary>
                Creates a new algorithm that realizes the layout described by this class.
            </summary>
        </member>
        <member name="T:Metrolib.IEdge">
            <summary>
                Represents an edge in a 2-d graph.
            </summary>
        </member>
        <member name="P:Metrolib.IEdge.Direction">
            <summary>
                The direction the edge points in, if any.
            </summary>
        </member>
        <member name="P:Metrolib.IEdge.Node1">
            <summary>
                The first node of this edge.
            </summary>
        </member>
        <member name="P:Metrolib.IEdge.Node2">
            <summary>
                The second node of this edge.
            </summary>
        </member>
        <member name="T:Metrolib.INodeLayoutAlgorithm">
            <summary>
                Interface for the algorithm that actually determines the positions of nodes in the graph.
            </summary>
            <remarks>
                An algorithm is required to present a <see cref="P:Metrolib.INodeLayoutAlgorithm.Result" /> that specifies the positions for each node.
                Nodes without an assigned position are not presented by the view.
            </remarks>
            <remarks>
                An algorithm cannot determine the layout of edges. If this is desired, open an issue on github ;)
            </remarks>
        </member>
        <member name="P:Metrolib.INodeLayoutAlgorithm.Result">
            <summary>
                The current result of the algorithm.
            </summary>
        </member>
        <member name="M:Metrolib.INodeLayoutAlgorithm.Update(System.TimeSpan)">
            <summary>
                Updates the algorithm.
            </summary>
            <remarks>
                Is *always* invoked from the UI thread.
                This method should not block for longer than a few milliseconds or otherwise the UI might become stuck.
            </remarks>
            <param name="elapsed"></param>
        </member>
        <member name="M:Metrolib.INodeLayoutAlgorithm.AddNode(Metrolib.INode)">
            <summary>
                Adds the given node to the list of nodes of the graph.
            </summary>
            <param name="node"></param>
        </member>
        <member name="M:Metrolib.INodeLayoutAlgorithm.RemoveNode(Metrolib.INode)">
            <summary>
                Removes the given node from the list of nodes of the graph.
            </summary>
            <param name="node"></param>
        </member>
        <member name="M:Metrolib.INodeLayoutAlgorithm.ClearNodes">
            <summary>
                Removes all nodes from the graph.
            </summary>
        </member>
        <member name="M:Metrolib.INodeLayoutAlgorithm.Freeze(Metrolib.INode)">
            <summary>
                Freezes the given so that its position doesn't change until the node is unfrozen (<see cref="M:Metrolib.INodeLayoutAlgorithm.Unfreeze(Metrolib.INode)" />) again.
            </summary>
            <remarks>
                Is invoked by the view when the user starts dragging nodes around.
            </remarks>
            <param name="node"></param>
        </member>
        <member name="M:Metrolib.INodeLayoutAlgorithm.Unfreeze(Metrolib.INode)">
            <summary>
                Unfreezes the given node so that its may change, if the algorithm deems it necessary, of-course.
            </summary>
            <param name="node"></param>
        </member>
        <member name="M:Metrolib.INodeLayoutAlgorithm.AddEdge(Metrolib.IEdge)">
            <summary>
                Adds the given edge to the graph.
            </summary>
            <remarks>
                Edges may point to nodes that have not been added (yet).
            </remarks>
            <param name="edge"></param>
        </member>
        <member name="M:Metrolib.INodeLayoutAlgorithm.RemoveEdge(Metrolib.IEdge)">
            <summary>
                Removes the given list of edges from the graph.
            </summary>
            <remarks>
                Edges may point to nodes that have not been added (yet).
            </remarks>
            <param name="edge"></param>
        </member>
        <member name="M:Metrolib.INodeLayoutAlgorithm.ClearEdges">
            <summary>
                Removes all edges from the graph.
            </summary>
        </member>
        <member name="M:Metrolib.INodeLayoutAlgorithm.SetPosition(Metrolib.INode,System.Windows.Point)">
            <summary>
            Overwrites the position assigned by this algorithm with the given one.
            </summary>
            <param name="node"></param>
            <param name="position"></param>
        </member>
        <member name="T:Metrolib.Layout">
            <summary>
                Defines the algorithm and its parameters, used to layout the graph.
            </summary>
            <remarks>
            <see cref="T:Metrolib.ForceDirectedLayout"/> for the default algorithm used to layout graphs.
            Can be subclassed in order to allow the use of a custom algorithm.
            </remarks>
        </member>
        <member name="E:Metrolib.Layout.PropertyChanged">
            <summary>
                Is fired whenever a property's value changes.
            </summary>
        </member>
        <member name="M:Metrolib.Layout.CreateAlgorithm">
            <summary>
                Creates a new algorithm that realizes the layout described by this class.
            </summary>
            <remarks>
                The algorithm shall react to changes made to this object, even after its construction
                when the next call to <see cref="M:Metrolib.INodeLayoutAlgorithm.Update(System.TimeSpan)" /> occurs.
            </remarks>
            <returns></returns>
        </member>
        <member name="M:Metrolib.Layout.EmitPropertyChanged(System.String)">
            <summary>
                Fires the <see cref="E:Metrolib.Layout.PropertyChanged" /> event.
            </summary>
            <param name="propertyName"></param>
        </member>
        <member name="T:Metrolib.NetworkView">
            <summary>
                A view capable of displaying a graph consisting of <see cref="T:Metrolib.INode" />s and <see cref="T:Metrolib.IEdge" />s.
                Supports different <see cref="P:Metrolib.NetworkView.Layout" />s that control how the graph is presented.
            </summary>
        </member>
        <member name="F:Metrolib.NetworkView.NodeZIndex">
            <summary>
                The <see cref="F:System.Windows.Controls.Panel.ZIndexProperty" /> value assigned to <see cref="T:Metrolib.NetworkViewNodeItem" />.
            </summary>
        </member>
        <member name="F:Metrolib.NetworkView.EdgeZIndex">
            <summary>
                The <see cref="F:System.Windows.Controls.Panel.ZIndexProperty" /> value assigned to <see cref="T:System.Windows.Shapes.Line" />.
            </summary>
        </member>
        <member name="F:Metrolib.NetworkView.NodeTemplateProperty">
            <summary>
                Definition of the <see cref="P:Metrolib.NetworkView.NodeTemplate" /> dependency property.
            </summary>
        </member>
        <member name="F:Metrolib.NetworkView.EdgesProperty">
            <summary>
                Definition of the <see cref="P:Metrolib.NetworkView.Edges" /> dependency property.
            </summary>
        </member>
        <member name="F:Metrolib.NetworkView.NodesProperty">
            <summary>
                Definition of the <see cref="P:Metrolib.NetworkView.Nodes" /> dependency property.
            </summary>
        </member>
        <member name="F:Metrolib.NetworkView.LayoutProperty">
            <summary>
                Definition of the <see cref="P:Metrolib.NetworkView.Layout" /> dependency property.
            </summary>
        </member>
        <member name="M:Metrolib.NetworkView.#ctor">
            <summary>
                Initializes this <see cref="T:Metrolib.NetworkView" />.
            </summary>
        </member>
        <member name="P:Metrolib.NetworkView.Layout">
            <summary>
                Defines the layout
            </summary>
        </member>
        <member name="P:Metrolib.NetworkView.NodeTemplate">
            <summary>
                The template being used to display individual nodes.
            </summary>
        </member>
        <member name="P:Metrolib.NetworkView.Nodes">
            <summary>
                The list of nodes being displayed by this chart.
            </summary>
        </member>
        <member name="P:Metrolib.NetworkView.Edges">
            <summary>
                The list of edges connections the nodes in <see cref="P:Metrolib.NetworkView.Nodes" />.
            </summary>
        </member>
        <member name="P:Metrolib.NetworkView.BoundingRectangle">
            <summary>
                The bounding rectangle (min/max) values of the raw results of the current algorithm.
            </summary>
        </member>
        <member name="M:Metrolib.NetworkView.MeasureOverride(System.Windows.Size)">
            <summary>
                Determine required size.
            </summary>
            <param name="availableSize"></param>
            <returns></returns>
        </member>
        <member name="M:Metrolib.NetworkView.ArrangeOverride(System.Windows.Size)">
            <summary>
                Position and resize all children.
            </summary>
            <param name="finalSize"></param>
            <returns></returns>
        </member>
        <member name="M:Metrolib.NetworkView.OnMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)">
            <summary>
                Is called when the left mouse button is pressed.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Metrolib.NetworkView.OnMouseMove(System.Windows.Input.MouseEventArgs)">
            <summary>
                Is called when the mouse is moved.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Metrolib.NetworkView.OnMouseLeftButtonUp(System.Windows.Input.MouseButtonEventArgs)">
            <summary>
                Is called when the left mouse button is released.
            </summary>
            <param name="e"></param>
        </member>
        <member name="T:Metrolib.Range">
            <summary>
                Defines a range (minimum, maximum) of <see cref="T:System.Double" /> values.
            </summary>
        </member>
        <member name="F:Metrolib.Range.Maximum">
            <summary>
                The biggest value.
            </summary>
        </member>
        <member name="F:Metrolib.Range.Minimum">
            <summary>
                The smallest value.
            </summary>
        </member>
        <member name="M:Metrolib.Range.#ctor(System.Double)">
            <summary>
                Creates a range with the same minimum and maximum.
            </summary>
            <param name="minMax"></param>
        </member>
        <member name="M:Metrolib.Range.#ctor(System.Double,System.Double)">
            <summary>
                Creates a range from the given values.
            </summary>
            <param name="minValue"></param>
            <param name="maxValue"></param>
        </member>
        <member name="M:Metrolib.Range.Equals(Metrolib.Range)">
            <summary>
                Compares this range against the other for equality.
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:Metrolib.Range.ToString">
            <summary>
                Converts this value to a user readable string.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Metrolib.Range.Equals(System.Object)">
            <summary>
                Compares this range against the other for equality.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Metrolib.Range.GetHashCode">
            <summary>
                Computes the hashcode of this range.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Metrolib.Range.op_Equality(Metrolib.Range,Metrolib.Range)">
            <summary>
                Compares two ranges for equality.
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:Metrolib.Range.op_Inequality(Metrolib.Range,Metrolib.Range)">
            <summary>
                Compares two ranges for inequality.
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:Metrolib.Range.GetRelative(System.Double)">
            <summary>
                Returns zero if the given value is <see cref="F:Metrolib.Range.Minimum" />, 0.5 if it's (min+max)/2 and 1 if it's
                <see cref="F:Metrolib.Range.Maximum" />.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:Metrolib.GridPanel">
            <summary>
                Similar to a <see cref="T:System.Windows.Controls.StackPanel" /> in that children are either laid out in a vertical
                or horizontal manner. But each child is assigned a 1* column, giving each equal width/height.
            </summary>
        </member>
        <member name="F:Metrolib.GridPanel.OrientationProperty">
            <summary>
                Definition of the <see cref="P:Metrolib.GridPanel.Orientation" /> dependency property.
            </summary>
        </member>
        <member name="P:Metrolib.GridPanel.Orientation">
            <summary>
                The orientation of the children added to this panel.
            </summary>
        </member>
        <member name="M:Metrolib.GridPanel.MeasureOverride(System.Windows.Size)">
            <summary>
                Measures the children of a System.Windows.Controls.Grid in anticipation of arranging them during the System.Windows.Controls.Grid.ArrangeOverride(System.Windows.Size) pass.
            </summary>
            <param name="availableSize"></param>
            <returns></returns>
        </member>
        <member name="M:Metrolib.GridPanel.ArrangeOverride(System.Windows.Size)">
            <summary>
                Arranges the content of a System.Windows.Controls.Grid element.
            </summary>
            <param name="finalSize"></param>
            <returns></returns>
        </member>
        <member name="T:Metrolib.DelegateCommand">
            <summary>
                An <see cref="T:System.Windows.Input.ICommand" /> implementation that delegates both <see cref="M:Metrolib.DelegateCommand.Execute(System.Object)" /> and <see cref="M:Metrolib.DelegateCommand.CanExecute(System.Object)" />
                to user supplied delegates.
            </summary>
        </member>
        <member name="M:Metrolib.DelegateCommand.#ctor(System.Action)">
            <summary>
                Initializes this delegate command.
                Since no <see cref="M:Metrolib.DelegateCommand.CanExecute(System.Object)" /> delegate is given, it is assumed that the command may always be executed.
            </summary>
            <param name="execute"></param>
        </member>
        <member name="M:Metrolib.DelegateCommand.#ctor(System.Action,System.Func{System.Boolean})">
            <summary>
                Initializes this delegate command.
            </summary>
            <param name="execute"></param>
            <param name="canExecute"></param>
        </member>
        <member name="M:Metrolib.DelegateCommand.CanExecute(System.Object)">
            <summary>
                Defines the method that determines whether the command can execute in its current state.
            </summary>
            <param name="parameter"></param>
            <returns></returns>
        </member>
        <member name="M:Metrolib.DelegateCommand.Execute(System.Object)">
            <summary>
                Defines the method to be called when the command is invoked.
            </summary>
            <param name="parameter"></param>
        </member>
        <member name="E:Metrolib.DelegateCommand.CanExecuteChanged">
            <summary>
                Shall be fired whenever the command's <see cref="M:Metrolib.DelegateCommand.CanExecute(System.Object)" /> potentially returns a different
                value than previously.
            </summary>
        </member>
        <member name="M:Metrolib.DelegateCommand.RaiseCanExecuteChanged">
            <summary>
                Fires the <see cref="E:Metrolib.DelegateCommand.CanExecuteChanged" /> event.
            </summary>
        </member>
        <member name="T:Metrolib.DelegateCommand`1">
            <summary>
                An <see cref="T:System.Windows.Input.ICommand" /> implementation that delegates both <see cref="M:Metrolib.DelegateCommand`1.Execute(System.Object)" /> and <see cref="M:Metrolib.DelegateCommand`1.CanExecute(System.Object)" />
                to user supplied delegates.
                Furthermore, this implementation assumes that the target passed to both <see cref="M:Metrolib.DelegateCommand`1.Execute(System.Object)" /> and
                <see
                    cref="M:Metrolib.DelegateCommand`1.CanExecute(System.Object)" />
                are of the given type <typeparamref name="T" /> and attempts to cast them to the given type, before forwarding them
                to the user supplied delegates.
            </summary>
        </member>
        <member name="M:Metrolib.DelegateCommand`1.#ctor(System.Action{`0})">
            <summary>
                Initializes this delegate command.
                Since no <see cref="M:Metrolib.DelegateCommand`1.CanExecute(System.Object)" /> delegate is given, it is assumed that the command may always be executed.
            </summary>
            <param name="execute"></param>
        </member>
        <member name="M:Metrolib.DelegateCommand`1.#ctor(System.Action{`0},System.Func{`0,System.Boolean})">
            <summary>
                Initializes this delegate command.
            </summary>
            <param name="execute"></param>
            <param name="canExecute"></param>
        </member>
        <member name="M:Metrolib.DelegateCommand`1.CanExecute(System.Object)">
            <summary>
                Defines the method that determines whether the command can execute in its current state.
            </summary>
            <param name="parameter"></param>
            <returns></returns>
        </member>
        <member name="M:Metrolib.DelegateCommand`1.Execute(System.Object)">
            <summary>
                Defines the method to be called when the command is invoked.
            </summary>
            <param name="parameter"></param>
        </member>
        <member name="E:Metrolib.DelegateCommand`1.CanExecuteChanged">
            <summary>
                Shall be fired whenever the command's <see cref="M:Metrolib.DelegateCommand`1.CanExecute(System.Object)" /> potentially returns a different
                value than previously.
            </summary>
        </member>
        <member name="M:Metrolib.DelegateCommand`1.RaiseCanExecuteChanged">
            <summary>
                Fires the <see cref="E:Metrolib.DelegateCommand`1.CanExecuteChanged" /> event.
            </summary>
        </member>
        <member name="T:Metrolib.DependencyObjectExtensions">
            <summary>
            Contains extension methods for dependency objects.
            </summary>
        </member>
        <member name="M:Metrolib.DependencyObjectExtensions.FindFirstAncestorOfType``1(System.Windows.DependencyObject)">
            <summary>
            Finds the first ancestor that is of the given type.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="that"></param>
            <returns></returns>
        </member>
        <member name="T:Metrolib.IDispatcher">
            <summary>
                Interface for an object, capable of delaying the execution of user supplied actions to a later point in time.
            </summary>
        </member>
        <member name="P:Metrolib.IDispatcher.HasAccess">
            <summary>
                Whether or not the calling thread has access to the resource guarded by this dispatcher.
            </summary>
            <returns>
                Usually a dispatcher is used to guard access to a resource, for example a FrameworkElement.
                When a method doesn't have control over the thread it's called from (for example because it's
                an event delegate), then it might want to check if if can immediately access the resource,
                or if it should delegate the access via <see cref="M:Metrolib.IDispatcher.BeginInvoke(System.Action)" />.
            </returns>
            <returns>True when the calling thread has access to the resource, otherwise false.</returns>
        </member>
        <member name="M:Metrolib.IDispatcher.BeginInvoke(System.Action)">
            <summary>
                Adds the given action to the list of actions to be executed later on.
            </summary>
            <param name="fn"></param>
        </member>
        <member name="M:Metrolib.IDispatcher.BeginInvoke(System.Action,System.Windows.Threading.DispatcherPriority)">
            <summary>
                Adds the given action to the list of actions to be executed later on.
            </summary>
            <param name="fn"></param>
            <param name="priority"></param>
        </member>
        <member name="M:Metrolib.IDispatcher.BeginInvokeAsync(System.Action)">
            <summary>
                Adds the given action to the list of actions to be executed later on.
                Returns a task that is completed once the actual action has finished executing.
            </summary>
            <param name="fn"></param>
            <returns></returns>
        </member>
        <member name="M:Metrolib.IDispatcher.BeginInvokeAsync(System.Action,System.Windows.Threading.DispatcherPriority)">
            <summary>
                Adds the given action to the list of actions to be executed later on.
                Returns a task that is completed once the actual action has finished executing.
            </summary>
            <param name="fn"></param>
            <param name="priority"></param>
            <returns></returns>
        </member>
        <member name="T:Metrolib.ManualDispatcher">
            <summary>
                An <see cref="T:Metrolib.IDispatcher" /> implementation that only ever executes it's pending invocations
                when <see cref="M:Metrolib.ManualDispatcher.InvokeAll" /> is called.
            </summary>
            <remarks>
                Particularly usefull for unit tests.
            </remarks>
        </member>
        <member name="M:Metrolib.ManualDispatcher.#ctor">
            <summary>
                Initializes this dispatcher.
            </summary>
        </member>
        <member name="P:Metrolib.ManualDispatcher.HasAccess">
            <summary>
                Whether or not the calling thread has access to the resource guarded by this dispatcher.
            </summary>
        </member>
        <member name="M:Metrolib.ManualDispatcher.BeginInvoke(System.Action)">
            <summary>
                Adds the given action to the list of actions to be executed later on.
            </summary>
            <param name="fn"></param>
        </member>
        <member name="M:Metrolib.ManualDispatcher.BeginInvoke(System.Action,System.Windows.Threading.DispatcherPriority)">
            <summary>
                Adds the given action to the list of actions to be executed later on.
            </summary>
            <param name="fn"></param>
            <param name="priority"></param>
        </member>
        <member name="M:Metrolib.ManualDispatcher.InvokeAll">
            <summary>
                Executes all pending invocations and then clears the list of them.
            </summary>
        </member>
        <member name="T:Metrolib.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Metrolib.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Metrolib.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="T:Metrolib.RandomExtensions">
            <summary>
                Collects extension methods to the <see cref="T:System.Random" /> class.
            </summary>
        </member>
        <member name="M:Metrolib.RandomExtensions.NextDirection(System.Random)">
            <summary>
                Returns a random direction as a unit vector.
            </summary>
            <param name="rng"></param>
            <returns></returns>
        </member>
        <member name="T:Metrolib.ApplicationSettings">
            <summary>
                Represents all settings an application wants to store.
                Can be subclassed to add application specific properties.
            </summary>
        </member>
        <member name="F:Metrolib.ApplicationSettings.MainWindowSettings">
            <summary>
                The settings of the main window of the application (position, dimensions, etc...)
            </summary>
        </member>
        <member name="M:Metrolib.ApplicationSettings.#ctor">
            <summary>
                Default ctor.
            </summary>
        </member>
        <member name="M:Metrolib.ApplicationSettings.#ctor(Metrolib.ApplicationSettings)">
            <summary>
                Ctor intended to be used by subclasses in order to create a clone.
            </summary>
            <param name="applicationSettings"></param>
        </member>
        <member name="M:Metrolib.ApplicationSettings.RestoreFrom(System.String)">
            <summary>
                Restores this settings from the given file.
            </summary>
            <param name="fileName"></param>
        </member>
        <member name="M:Metrolib.ApplicationSettings.Read(System.Xml.XmlReader)">
            <summary>
                Is called repeatedly from <see cref="M:Metrolib.ApplicationSettings.RestoreFrom(System.String)" /> for every top level
                node written by <see cref="M:Metrolib.ApplicationSettings.Write(System.Xml.XmlWriter)" />.
            </summary>
            <param name="reader"></param>
        </member>
        <member name="M:Metrolib.ApplicationSettings.SaveAsync(System.String)">
            <summary>
                Saves this object to disk.
            </summary>
            <param name="fileName"></param>
            <returns>A task that completes when the settings have been saved.</returns>
        </member>
        <member name="M:Metrolib.ApplicationSettings.Save(System.String)">
            <summary>
                Saves this object to disk.
            </summary>
            <param name="fileName"></param>
        </member>
        <member name="M:Metrolib.ApplicationSettings.Write(System.Xml.XmlWriter)">
            <summary>
                Is eventually invoked when <see cref="M:Metrolib.ApplicationSettings.SaveAsync(System.String)" /> has been called.
            </summary>
            <param name="writer"></param>
        </member>
        <member name="M:Metrolib.ApplicationSettings.Clone">
            <summary>
                Creates a clone.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Metrolib.Size">
            <summary>
                This structure is meant to hold an amount of information, similar to
                <see cref="T:System.TimeSpan" /> holding an amount of time. The smallest unit of information
                that can be represented is a byte. All mathematical operations performed on this type
                are performed on the byte level (for example division performs integer division of the number
                of bytes of a Size value).
            </summary>
            <remarks>
                Values can be created from <see cref="M:Metrolib.Size.FromBytes(System.Int64)" />, etc.. and the amount of
                bytes, kilobytes, etc.. can be retrieved from <see cref="P:Metrolib.Size.Bytes" />
            </remarks>
        </member>
        <member name="F:Metrolib.Size.Zero">
            <summary>
                Exactly zero information.
            </summary>
        </member>
        <member name="F:Metrolib.Size.OneByte">
            <summary>
                One byte.
            </summary>
        </member>
        <member name="F:Metrolib.Size.OneKilobyte">
            <summary>
                One kilobyte (1024 bytes).
            </summary>
        </member>
        <member name="F:Metrolib.Size.OneMegabyte">
            <summary>
                One megabyte (1024² bytes).
            </summary>
        </member>
        <member name="F:Metrolib.Size.OneGigabyte">
            <summary>
                One gigabyte (1024³ bytes).
            </summary>
        </member>
        <member name="P:Metrolib.Size.Bytes">
            <summary>
                The total amount of bytes in this <see cref="T:Metrolib.Size" />.
            </summary>
        </member>
        <member name="P:Metrolib.Size.Kilobytes">
            <summary>
                The total amount of kilobytes in this <see cref="T:Metrolib.Size" />.
            </summary>
        </member>
        <member name="P:Metrolib.Size.Megabytes">
            <summary>
                The total amount of megaybtes in this <see cref="T:Metrolib.Size" />.
            </summary>
        </member>
        <member name="P:Metrolib.Size.Gigabytes">
            <summary>
                The total amount of gigabytes in this <see cref="T:Metrolib.Size" />.
            </summary>
        </member>
        <member name="M:Metrolib.Size.Equals(Metrolib.Size)">
            <summary>
                Compares this value against the given one for equality.
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:Metrolib.Size.Equals(System.Object)">
            <summary>
                Compares this value against the given one for equality.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Metrolib.Size.GetHashCode">
            <summary>
                Computes the hashcode of this size.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Metrolib.Size.op_GreaterThan(Metrolib.Size,Metrolib.Size)">
            <summary>
                Tests if the left hand size is greater than the right hand one.
            </summary>
            <param name="lhs"></param>
            <param name="rhs"></param>
            <returns></returns>
        </member>
        <member name="M:Metrolib.Size.op_LessThan(Metrolib.Size,Metrolib.Size)">
            <summary>
                Tests if the left hand size is less than the right hand one.
            </summary>
            <param name="lhs"></param>
            <param name="rhs"></param>
            <returns></returns>
        </member>
        <member name="M:Metrolib.Size.op_GreaterThanOrEqual(Metrolib.Size,Metrolib.Size)">
            <summary>
                Tests if the left hand size is greater or equal to the right hand one.
            </summary>
            <param name="lhs"></param>
            <param name="rhs"></param>
            <returns></returns>
        </member>
        <member name="M:Metrolib.Size.op_LessThanOrEqual(Metrolib.Size,Metrolib.Size)">
            <summary>
                Tests if the left hand size is less or equal to the right hand one.
            </summary>
            <param name="lhs"></param>
            <param name="rhs"></param>
            <returns></returns>
        </member>
        <member name="M:Metrolib.Size.op_Equality(Metrolib.Size,Metrolib.Size)">
            <summary>
                Compares two sizes for equality.
            </summary>
            <param name="lhs"></param>
            <param name="rhs"></param>
            <returns></returns>
        </member>
        <member name="M:Metrolib.Size.op_Inequality(Metrolib.Size,Metrolib.Size)">
            <summary>
                Compares two sizes for inequality.
            </summary>
            <param name="lhs"></param>
            <param name="rhs"></param>
            <returns></returns>
        </member>
        <member name="M:Metrolib.Size.op_Addition(Metrolib.Size,Metrolib.Size)">
            <summary>
                Adds two sizes.
            </summary>
            <param name="lhs"></param>
            <param name="rhs"></param>
            <returns></returns>
        </member>
        <member name="M:Metrolib.Size.op_Division(Metrolib.Size,Metrolib.Size)">
            <summary>
                Divides two sizes.
            </summary>
            <param name="lhs"></param>
            <param name="rhs"></param>
            <returns></returns>
        </member>
        <member name="M:Metrolib.Size.op_Subtraction(Metrolib.Size,Metrolib.Size)">
            <summary>
                Subtracts two sizes.
            </summary>
            <param name="lhs"></param>
            <param name="rhs"></param>
            <returns></returns>
        </member>
        <member name="M:Metrolib.Size.op_Multiply(Metrolib.Size,System.Int64)">
            <summary>
                Multiplies a size by an integer.
            </summary>
            <param name="lhs"></param>
            <param name="rhs"></param>
            <returns></returns>
        </member>
        <member name="M:Metrolib.Size.op_Multiply(System.Int64,Metrolib.Size)">
            <summary>
                Multiplies a size by an integer.
            </summary>
            <param name="lhs"></param>
            <param name="rhs"></param>
            <returns></returns>
        </member>
        <member name="M:Metrolib.Size.op_Division(Metrolib.Size,System.Int64)">
            <summary>
                Divides a size by an integer.
            </summary>
            <param name="lhs"></param>
            <param name="rhs"></param>
            <returns></returns>
        </member>
        <member name="M:Metrolib.Size.ToString">
            <summary>
                Converts this value to a user readable string.
                Attempts to choose the most appropriate unit for the actual value.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Metrolib.Size.FromBytes(System.Int64)">
            <summary>
                Creates a new <see cref="T:Metrolib.Size" /> that holds the given amount of bytes.
            </summary>
            <param name="numBytes"></param>
            <returns></returns>
        </member>
        <member name="M:Metrolib.Size.FromKilobytes(System.Int64)">
            <summary>
                Creates a new <see cref="T:Metrolib.Size" /> that holds the given amount of kilobytes.
            </summary>
            <param name="numKilobytes"></param>
            <returns></returns>
        </member>
        <member name="M:Metrolib.Size.FromMegabytes(System.Int64)">
            <summary>
                Creates a new <see cref="T:Metrolib.Size" /> that holds the given amount of megabytes.
            </summary>
            <param name="numMegabytes"></param>
            <returns></returns>
        </member>
        <member name="M:Metrolib.Size.FromGigabytes(System.Int64)">
            <summary>
                Creates a new <see cref="T:Metrolib.Size" /> that holds the given amount of gigabytes.
            </summary>
            <param name="numGigabytes"></param>
            <returns></returns>
        </member>
        <member name="T:Metrolib.UiDispatcher">
            <summary>
                Encapsulates a <see cref="T:System.Windows.Threading.Dispatcher" />.
            </summary>
        </member>
        <member name="M:Metrolib.UiDispatcher.#ctor(System.Windows.Threading.Dispatcher)">
            <summary>
                Initializes this dispatcher.
                All calls to <see cref="M:Metrolib.UiDispatcher.BeginInvoke(System.Action)" /> will be forwarded to the given <paramref name="dispatcher" />.
            </summary>
            <param name="dispatcher"></param>
        </member>
        <member name="P:Metrolib.UiDispatcher.HasAccess">
            <inheritdoc />
        </member>
        <member name="M:Metrolib.UiDispatcher.BeginInvoke(System.Action)">
            <inheritdoc />
        </member>
        <member name="M:Metrolib.UiDispatcher.BeginInvoke(System.Action,System.Windows.Threading.DispatcherPriority)">
            <inheritdoc />
        </member>
        <member name="M:Metrolib.UiDispatcher.BeginInvokeAsync(System.Action)">
            <inheritdoc />
        </member>
        <member name="M:Metrolib.UiDispatcher.BeginInvokeAsync(System.Action,System.Windows.Threading.DispatcherPriority)">
            <inheritdoc />
        </member>
        <member name="T:Metrolib.WindowSettings">
            <summary>
                Represents the configuration of a window.
                Currently only preserves a window's position + dimension, but may be expanded in the future.
            </summary>
        </member>
        <member name="F:Metrolib.WindowSettings.Height">
            <summary>
                The height of the window.
            </summary>
        </member>
        <member name="F:Metrolib.WindowSettings.Left">
            <summary>
                The left coordinate of the window's position.
            </summary>
        </member>
        <member name="F:Metrolib.WindowSettings.State">
            <summary>
                The state of the window (i.e. normal, minimized, maximized, etc...).
            </summary>
        </member>
        <member name="F:Metrolib.WindowSettings.Top">
            <summary>
                The top coordinate of the window's position.
            </summary>
        </member>
        <member name="F:Metrolib.WindowSettings.Width">
            <summary>
                The width of the window.
            </summary>
        </member>
        <member name="M:Metrolib.WindowSettings.RestoreTo(System.Windows.Window)">
            <summary>
                Restores the given window's values to the ones in this object.
            </summary>
            <param name="window"></param>
        </member>
        <member name="M:Metrolib.WindowSettings.Restore(System.Xml.XmlReader)">
            <summary>
                Restores all values from the given xml reader.
            </summary>
            <param name="reader"></param>
        </member>
        <member name="M:Metrolib.WindowSettings.Save(System.Xml.XmlWriter)">
            <summary>
                Saves all values to the given xml writer.
            </summary>
            <param name="writer"></param>
        </member>
        <member name="M:Metrolib.WindowSettings.UpdateFrom(System.Windows.Window)">
            <summary>
                Fetches all values from the given window (to be saved to an xml file, for example).
            </summary>
            <param name="window"></param>
        </member>
        <member name="M:Metrolib.WindowSettings.Clone">
            <summary>
                Returns a clone.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Metrolib.VectorExtensions">
            <summary>
            </summary>
        </member>
        <member name="M:Metrolib.VectorExtensions.Clamped(System.Windows.Vector,System.Double)">
            <summary>
                Returns a vector that is clamped to the given length.
            </summary>
            <param name="that"></param>
            <param name="maxLength"></param>
            <returns></returns>
        </member>
        <member name="M:Metrolib.VectorExtensions.Normalized(System.Windows.Vector)">
            <summary>
                Returns a normalized vector of this.
            </summary>
            <param name="that"></param>
            <returns></returns>
        </member>
        <member name="T:Metrolib.VersionExtensions">
            <summary>
                Provides extension methods for the <see cref="T:System.Version" /> class.
            </summary>
        </member>
        <member name="M:Metrolib.VersionExtensions.Format(System.Version)">
            <summary>
                Produces a humna readable string of this version.
            </summary>
            <param name="version"></param>
            <returns></returns>
        </member>
        <member name="T:GeoVis.MercatorRectangle">
            <summary>
                Represents an axis aligned rectangle in mercator space.
            </summary>
        </member>
        <member name="F:GeoVis.MercatorRectangle.Earth">
            <summary>
            </summary>
        </member>
        <member name="F:GeoVis.MercatorRectangle.Max">
            <summary>
            </summary>
        </member>
        <member name="F:GeoVis.MercatorRectangle.Min">
            <summary>
            </summary>
        </member>
        <member name="P:GeoVis.MercatorRectangle.Width">
            <summary>
                Width of this rectangle.
            </summary>
        </member>
        <member name="P:GeoVis.MercatorRectangle.Height">
            <summary>
                Height of this rectangle.
            </summary>
        </member>
        <member name="M:GeoVis.MercatorRectangle.Equals(GeoVis.MercatorRectangle)">
            <summary>
                Tests if this rectangle equals the given one.
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:GeoVis.MercatorRectangle.ToString">
            <summary>
                Returns a string that represents the current object.
            </summary>
            <returns></returns>
        </member>
        <member name="M:GeoVis.MercatorRectangle.Equals(System.Object)">
            <summary>
                Indicates whether this instance and a specified object are equal.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:GeoVis.MercatorRectangle.GetHashCode">
            <summary>
                Returns the hash code for this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="M:GeoVis.MercatorRectangle.op_Equality(GeoVis.MercatorRectangle,GeoVis.MercatorRectangle)">
            <summary>
                Tests the two given rectangles for equality.
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:GeoVis.MercatorRectangle.op_Inequality(GeoVis.MercatorRectangle,GeoVis.MercatorRectangle)">
            <summary>
                Tests the two given rectangles for inequality.
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:GeoVis.MercatorRectangle.FromMinMax(System.Double,System.Double,System.Double,System.Double)">
            <summary>
                Creates a new rectangle from the given values.
            </summary>
            <param name="minX"></param>
            <param name="maxY"></param>
            <param name="maxX"></param>
            <param name="minY"></param>
            <returns></returns>
        </member>
        <member name="T:XamlGeneratedNamespace.GeneratedInternalTypeHelper">
            <summary>
            GeneratedInternalTypeHelper
            </summary>
        </member>
        <member name="M:XamlGeneratedNamespace.GeneratedInternalTypeHelper.CreateInstance(System.Type,System.Globalization.CultureInfo)">
            <summary>
            CreateInstance
            </summary>
        </member>
        <member name="M:XamlGeneratedNamespace.GeneratedInternalTypeHelper.GetPropertyValue(System.Reflection.PropertyInfo,System.Object,System.Globalization.CultureInfo)">
            <summary>
            GetPropertyValue
            </summary>
        </member>
        <member name="M:XamlGeneratedNamespace.GeneratedInternalTypeHelper.SetPropertyValue(System.Reflection.PropertyInfo,System.Object,System.Object,System.Globalization.CultureInfo)">
            <summary>
            SetPropertyValue
            </summary>
        </member>
        <member name="M:XamlGeneratedNamespace.GeneratedInternalTypeHelper.CreateDelegate(System.Type,System.Object,System.String)">
            <summary>
            CreateDelegate
            </summary>
        </member>
        <member name="M:XamlGeneratedNamespace.GeneratedInternalTypeHelper.AddEventHandler(System.Reflection.EventInfo,System.Object,System.Delegate)">
            <summary>
            AddEventHandler
            </summary>
        </member>
    </members>
</doc>
